/*
 * generated by Xtext 2.35.0
 */
grammar InternalLlms;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package large.logic.forMathematics.statistics.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package large.logic.forMathematics.statistics.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import large.logic.forMathematics.statistics.services.LlmsGrammarAccess;

}
@parser::members {
	private LlmsGrammarAccess grammarAccess;

	public void setGrammarAccess(LlmsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleOperations
entryRuleOperations
:
{ before(grammarAccess.getOperationsRule()); }
	 ruleOperations
{ after(grammarAccess.getOperationsRule()); } 
	 EOF 
;

// Rule Operations
ruleOperations 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationsAccess().getGroup()); }
		(rule__Operations__Group__0)
		{ after(grammarAccess.getOperationsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrints
entryRulePrints
:
{ before(grammarAccess.getPrintsRule()); }
	 rulePrints
{ after(grammarAccess.getPrintsRule()); } 
	 EOF 
;

// Rule Prints
rulePrints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintsAccess().getGroup()); }
		(rule__Prints__Group__0)
		{ after(grammarAccess.getPrintsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParmsPrint
entryRuleParmsPrint
:
{ before(grammarAccess.getParmsPrintRule()); }
	 ruleParmsPrint
{ after(grammarAccess.getParmsPrintRule()); } 
	 EOF 
;

// Rule ParmsPrint
ruleParmsPrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParmsPrintAccess().getAlternatives()); }
		(rule__ParmsPrint__Alternatives)
		{ after(grammarAccess.getParmsPrintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNames
entryRuleNames
:
{ before(grammarAccess.getNamesRule()); }
	 ruleNames
{ after(grammarAccess.getNamesRule()); } 
	 EOF 
;

// Rule Names
ruleNames 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamesAccess().getNameAssignment()); }
		(rule__Names__NameAssignment)
		{ after(grammarAccess.getNamesAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctions
entryRuleFunctions
:
{ before(grammarAccess.getFunctionsRule()); }
	 ruleFunctions
{ after(grammarAccess.getFunctionsRule()); } 
	 EOF 
;

// Rule Functions
ruleFunctions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionsAccess().getGroup()); }
		(rule__Functions__Group__0)
		{ after(grammarAccess.getFunctionsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBodies
entryRuleBodies
:
{ before(grammarAccess.getBodiesRule()); }
	 ruleBodies
{ after(grammarAccess.getBodiesRule()); } 
	 EOF 
;

// Rule Bodies
ruleBodies 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodiesAccess().getGroup()); }
		(rule__Bodies__Group__0)
		{ after(grammarAccess.getBodiesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoops
entryRuleLoops
:
{ before(grammarAccess.getLoopsRule()); }
	 ruleLoops
{ after(grammarAccess.getLoopsRule()); } 
	 EOF 
;

// Rule Loops
ruleLoops 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopsAccess().getGroup()); }
		(rule__Loops__Group__0)
		{ after(grammarAccess.getLoopsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionals
entryRuleConditionals
:
{ before(grammarAccess.getConditionalsRule()); }
	 ruleConditionals
{ after(grammarAccess.getConditionalsRule()); } 
	 EOF 
;

// Rule Conditionals
ruleConditionals 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalsAccess().getGroup()); }
		(rule__Conditionals__Group__0)
		{ after(grammarAccess.getConditionalsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalParams
entryRuleLogicalParams
:
{ before(grammarAccess.getLogicalParamsRule()); }
	 ruleLogicalParams
{ after(grammarAccess.getLogicalParamsRule()); } 
	 EOF 
;

// Rule LogicalParams
ruleLogicalParams 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalParamsAccess().getGroup()); }
		(rule__LogicalParams__Group__0)
		{ after(grammarAccess.getLogicalParamsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParametersOutptut
entryRuleParametersOutptut
:
{ before(grammarAccess.getParametersOutptutRule()); }
	 ruleParametersOutptut
{ after(grammarAccess.getParametersOutptutRule()); } 
	 EOF 
;

// Rule ParametersOutptut
ruleParametersOutptut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametersOutptutAccess().getAlternatives()); }
		(rule__ParametersOutptut__Alternatives)
		{ after(grammarAccess.getParametersOutptutAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParametersfunc
entryRuleParametersfunc
:
{ before(grammarAccess.getParametersfuncRule()); }
	 ruleParametersfunc
{ after(grammarAccess.getParametersfuncRule()); } 
	 EOF 
;

// Rule Parametersfunc
ruleParametersfunc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametersfuncAccess().getGroup()); }
		(rule__Parametersfunc__Group__0)
		{ after(grammarAccess.getParametersfuncAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOpAssignment()); }
		(rule__Expression__OpAssignment)
		{ after(grammarAccess.getExpressionAccess().getOpAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperation
entryRuleLogicalOperation
:
{ before(grammarAccess.getLogicalOperationRule()); }
	 ruleLogicalOperation
{ after(grammarAccess.getLogicalOperationRule()); } 
	 EOF 
;

// Rule LogicalOperation
ruleLogicalOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperationAccess().getAlternatives()); }
		(rule__LogicalOperation__Alternatives)
		{ after(grammarAccess.getLogicalOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLessThan
entryRuleLessThan
:
{ before(grammarAccess.getLessThanRule()); }
	 ruleLessThan
{ after(grammarAccess.getLessThanRule()); } 
	 EOF 
;

// Rule LessThan
ruleLessThan 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLessThanAccess().getGroup()); }
		(rule__LessThan__Group__0)
		{ after(grammarAccess.getLessThanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreaterThan
entryRuleGreaterThan
:
{ before(grammarAccess.getGreaterThanRule()); }
	 ruleGreaterThan
{ after(grammarAccess.getGreaterThanRule()); } 
	 EOF 
;

// Rule GreaterThan
ruleGreaterThan 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreaterThanAccess().getGroup()); }
		(rule__GreaterThan__Group__0)
		{ after(grammarAccess.getGreaterThanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqual
entryRuleEqual
:
{ before(grammarAccess.getEqualRule()); }
	 ruleEqual
{ after(grammarAccess.getEqualRule()); } 
	 EOF 
;

// Rule Equal
ruleEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualAccess().getGroup()); }
		(rule__Equal__Group__0)
		{ after(grammarAccess.getEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotEqual
entryRuleNotEqual
:
{ before(grammarAccess.getNotEqualRule()); }
	 ruleNotEqual
{ after(grammarAccess.getNotEqualRule()); } 
	 EOF 
;

// Rule NotEqual
ruleNotEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotEqualAccess().getGroup()); }
		(rule__NotEqual__Group__0)
		{ after(grammarAccess.getNotEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLessOrEqual
entryRuleLessOrEqual
:
{ before(grammarAccess.getLessOrEqualRule()); }
	 ruleLessOrEqual
{ after(grammarAccess.getLessOrEqualRule()); } 
	 EOF 
;

// Rule LessOrEqual
ruleLessOrEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLessOrEqualAccess().getGroup()); }
		(rule__LessOrEqual__Group__0)
		{ after(grammarAccess.getLessOrEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreaterOrEqual
entryRuleGreaterOrEqual
:
{ before(grammarAccess.getGreaterOrEqualRule()); }
	 ruleGreaterOrEqual
{ after(grammarAccess.getGreaterOrEqualRule()); } 
	 EOF 
;

// Rule GreaterOrEqual
ruleGreaterOrEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreaterOrEqualAccess().getGroup()); }
		(rule__GreaterOrEqual__Group__0)
		{ after(grammarAccess.getGreaterOrEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanFunction
entryRuleBooleanFunction
:
{ before(grammarAccess.getBooleanFunctionRule()); }
	 ruleBooleanFunction
{ after(grammarAccess.getBooleanFunctionRule()); } 
	 EOF 
;

// Rule BooleanFunction
ruleBooleanFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanFunctionAccess().getAlternatives()); }
		(rule__BooleanFunction__Alternatives)
		{ after(grammarAccess.getBooleanFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnds
entryRuleAnds
:
{ before(grammarAccess.getAndsRule()); }
	 ruleAnds
{ after(grammarAccess.getAndsRule()); } 
	 EOF 
;

// Rule Ands
ruleAnds 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndsAccess().getGroup()); }
		(rule__Ands__Group__0)
		{ after(grammarAccess.getAndsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrs
entryRuleOrs
:
{ before(grammarAccess.getOrsRule()); }
	 ruleOrs
{ after(grammarAccess.getOrsRule()); } 
	 EOF 
;

// Rule Ors
ruleOrs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrsAccess().getGroup()); }
		(rule__Ors__Group__0)
		{ after(grammarAccess.getOrsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNots
entryRuleNots
:
{ before(grammarAccess.getNotsRule()); }
	 ruleNots
{ after(grammarAccess.getNotsRule()); } 
	 EOF 
;

// Rule Nots
ruleNots 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotsAccess().getGroup()); }
		(rule__Nots__Group__0)
		{ after(grammarAccess.getNotsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNors
entryRuleNors
:
{ before(grammarAccess.getNorsRule()); }
	 ruleNors
{ after(grammarAccess.getNorsRule()); } 
	 EOF 
;

// Rule Nors
ruleNors 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNorsAccess().getGroup()); }
		(rule__Nors__Group__0)
		{ after(grammarAccess.getNorsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNands
entryRuleNands
:
{ before(grammarAccess.getNandsRule()); }
	 ruleNands
{ after(grammarAccess.getNandsRule()); } 
	 EOF 
;

// Rule Nands
ruleNands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNandsAccess().getGroup()); }
		(rule__Nands__Group__0)
		{ after(grammarAccess.getNandsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAritmeticOperation
entryRuleAritmeticOperation
:
{ before(grammarAccess.getAritmeticOperationRule()); }
	 ruleAritmeticOperation
{ after(grammarAccess.getAritmeticOperationRule()); } 
	 EOF 
;

// Rule AritmeticOperation
ruleAritmeticOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAritmeticOperationAccess().getSumAssignment()); }
		(rule__AritmeticOperation__SumAssignment)
		{ after(grammarAccess.getAritmeticOperationAccess().getSumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSum
entryRuleSum
:
{ before(grammarAccess.getSumRule()); }
	 ruleSum
{ after(grammarAccess.getSumRule()); } 
	 EOF 
;

// Rule Sum
ruleSum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSumAccess().getGroup()); }
		(rule__Sum__Group__0)
		{ after(grammarAccess.getSumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubs
entryRuleSubs
:
{ before(grammarAccess.getSubsRule()); }
	 ruleSubs
{ after(grammarAccess.getSubsRule()); } 
	 EOF 
;

// Rule Subs
ruleSubs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubsAccess().getGroup()); }
		(rule__Subs__Group__0)
		{ after(grammarAccess.getSubsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivition
entryRuleDivition
:
{ before(grammarAccess.getDivitionRule()); }
	 ruleDivition
{ after(grammarAccess.getDivitionRule()); } 
	 EOF 
;

// Rule Divition
ruleDivition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivitionAccess().getGroup()); }
		(rule__Divition__Group__0)
		{ after(grammarAccess.getDivitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecallFunction
entryRulecallFunction
:
{ before(grammarAccess.getCallFunctionRule()); }
	 rulecallFunction
{ after(grammarAccess.getCallFunctionRule()); } 
	 EOF 
;

// Rule callFunction
rulecallFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallFunctionAccess().getGroup()); }
		(rule__CallFunction__Group__0)
		{ after(grammarAccess.getCallFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariables
entryRuleVariables
:
{ before(grammarAccess.getVariablesRule()); }
	 ruleVariables
{ after(grammarAccess.getVariablesRule()); } 
	 EOF 
;

// Rule Variables
ruleVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariablesAccess().getGroup()); }
		(rule__Variables__Group__0)
		{ after(grammarAccess.getVariablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCallVariable
entryRuleCallVariable
:
{ before(grammarAccess.getCallVariableRule()); }
	 ruleCallVariable
{ after(grammarAccess.getCallVariableRule()); } 
	 EOF 
;

// Rule CallVariable
ruleCallVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallVariableAccess().getVarsAssignment()); }
		(rule__CallVariable__VarsAssignment)
		{ after(grammarAccess.getCallVariableAccess().getVarsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarParmArgs
entryRulevarParmArgs
:
{ before(grammarAccess.getVarParmArgsRule()); }
	 rulevarParmArgs
{ after(grammarAccess.getVarParmArgsRule()); } 
	 EOF 
;

// Rule varParmArgs
rulevarParmArgs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarParmArgsAccess().getGroup()); }
		(rule__VarParmArgs__Group__0)
		{ after(grammarAccess.getVarParmArgsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataTypes
entryRuleDataTypes
:
{ before(grammarAccess.getDataTypesRule()); }
	 ruleDataTypes
{ after(grammarAccess.getDataTypesRule()); } 
	 EOF 
;

// Rule DataTypes
ruleDataTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypesAccess().getAlternatives()); }
		(rule__DataTypes__Alternatives)
		{ after(grammarAccess.getDataTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleData
entryRuleData
:
{ before(grammarAccess.getDataRule()); }
	 ruleData
{ after(grammarAccess.getDataRule()); } 
	 EOF 
;

// Rule Data
ruleData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataAccess().getAlternatives()); }
		(rule__Data__Alternatives)
		{ after(grammarAccess.getDataAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumbers
entryRuleNumbers
:
{ before(grammarAccess.getNumbersRule()); }
	 ruleNumbers
{ after(grammarAccess.getNumbersRule()); } 
	 EOF 
;

// Rule Numbers
ruleNumbers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumbersAccess().getValueAssignment()); }
		(rule__Numbers__ValueAssignment)
		{ after(grammarAccess.getNumbersAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrings
entryRuleStrings
:
{ before(grammarAccess.getStringsRule()); }
	 ruleStrings
{ after(grammarAccess.getStringsRule()); } 
	 EOF 
;

// Rule Strings
ruleStrings 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringsAccess().getValueAssignment()); }
		(rule__Strings__ValueAssignment)
		{ after(grammarAccess.getStringsAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleans
entryRuleBooleans
:
{ before(grammarAccess.getBooleansRule()); }
	 ruleBooleans
{ after(grammarAccess.getBooleansRule()); } 
	 EOF 
;

// Rule Booleans
ruleBooleans 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleansAccess().getAlternatives()); }
		(rule__Booleans__Alternatives)
		{ after(grammarAccess.getBooleansAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoubles
entryRuleDoubles
:
{ before(grammarAccess.getDoublesRule()); }
	 ruleDoubles
{ after(grammarAccess.getDoublesRule()); } 
	 EOF 
;

// Rule Doubles
ruleDoubles 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoublesAccess().getValueAssignment()); }
		(rule__Doubles__ValueAssignment)
		{ after(grammarAccess.getDoublesAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getFuncAssignment_3_0()); }
		(rule__Operations__FuncAssignment_3_0)
		{ after(grammarAccess.getOperationsAccess().getFuncAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationsAccess().getVarAssignment_3_1()); }
		(rule__Operations__VarAssignment_3_1)
		{ after(grammarAccess.getOperationsAccess().getVarAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperationsAccess().getConditionalAssignment_3_2()); }
		(rule__Operations__ConditionalAssignment_3_2)
		{ after(grammarAccess.getOperationsAccess().getConditionalAssignment_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperationsAccess().getLoopsAssignment_3_3()); }
		(rule__Operations__LoopsAssignment_3_3)
		{ after(grammarAccess.getOperationsAccess().getLoopsAssignment_3_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperationsAccess().getPrintAssignment_3_4()); }
		(rule__Operations__PrintAssignment_3_4)
		{ after(grammarAccess.getOperationsAccess().getPrintAssignment_3_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParmsPrint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParmsPrintAccess().getDataParserRuleCall_0()); }
		ruleData
		{ after(grammarAccess.getParmsPrintAccess().getDataParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParmsPrintAccess().getCallVariableParserRuleCall_1()); }
		ruleCallVariable
		{ after(grammarAccess.getParmsPrintAccess().getCallVariableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getParmsPrintAccess().getCallFunctionParserRuleCall_2()); }
		rulecallFunction
		{ after(grammarAccess.getParmsPrintAccess().getCallFunctionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopsAccess().getVariablesParserRuleCall_2_0()); }
		ruleVariables
		{ after(grammarAccess.getLoopsAccess().getVariablesParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getLoopsAccess().getNumbersParserRuleCall_2_1()); }
		ruleNumbers
		{ after(grammarAccess.getLoopsAccess().getNumbersParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersOutptutAccess().getParamAssignment_0()); }
		(rule__ParametersOutptut__ParamAssignment_0)
		{ after(grammarAccess.getParametersOutptutAccess().getParamAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getParametersOutptutAccess().getGroup_1()); }
		(rule__ParametersOutptut__Group_1__0)
		{ after(grammarAccess.getParametersOutptutAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getAritmeticOperationParserRuleCall_0()); }
		ruleAritmeticOperation
		{ after(grammarAccess.getOperationAccess().getAritmeticOperationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getLogicalOperationParserRuleCall_1()); }
		ruleLogicalOperation
		{ after(grammarAccess.getOperationAccess().getLogicalOperationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getBooleanFunctionParserRuleCall_2()); }
		ruleBooleanFunction
		{ after(grammarAccess.getOperationAccess().getBooleanFunctionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperationAccess().getLessThanParserRuleCall_0()); }
		ruleLessThan
		{ after(grammarAccess.getLogicalOperationAccess().getLessThanParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getGreaterThanParserRuleCall_1()); }
		ruleGreaterThan
		{ after(grammarAccess.getLogicalOperationAccess().getGreaterThanParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getEqualParserRuleCall_2()); }
		ruleEqual
		{ after(grammarAccess.getLogicalOperationAccess().getEqualParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getNotEqualParserRuleCall_3()); }
		ruleNotEqual
		{ after(grammarAccess.getLogicalOperationAccess().getNotEqualParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getLessOrEqualParserRuleCall_4()); }
		ruleLessOrEqual
		{ after(grammarAccess.getLogicalOperationAccess().getLessOrEqualParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getGreaterOrEqualParserRuleCall_5()); }
		ruleGreaterOrEqual
		{ after(grammarAccess.getLogicalOperationAccess().getGreaterOrEqualParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanFunction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanFunctionAccess().getAndsParserRuleCall_0()); }
		ruleAnds
		{ after(grammarAccess.getBooleanFunctionAccess().getAndsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanFunctionAccess().getOrsParserRuleCall_1()); }
		ruleOrs
		{ after(grammarAccess.getBooleanFunctionAccess().getOrsParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanFunctionAccess().getNotsParserRuleCall_2()); }
		ruleNots
		{ after(grammarAccess.getBooleanFunctionAccess().getNotsParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanFunctionAccess().getNorsParserRuleCall_3()); }
		ruleNors
		{ after(grammarAccess.getBooleanFunctionAccess().getNorsParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanFunctionAccess().getNandsParserRuleCall_4()); }
		ruleNands
		{ after(grammarAccess.getBooleanFunctionAccess().getNandsParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getVarParmArgsParserRuleCall_0()); }
		rulevarParmArgs
		{ after(grammarAccess.getPrimaryAccess().getVarParmArgsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVarAssignment_1()); }
		(rule__Primary__VarAssignment_1)
		{ after(grammarAccess.getPrimaryAccess().getVarAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getCallFunctionParserRuleCall_2()); }
		rulecallFunction
		{ after(grammarAccess.getPrimaryAccess().getCallFunctionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getDataParserRuleCall_3()); }
		ruleData
		{ after(grammarAccess.getPrimaryAccess().getDataParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getVarParmArgsParserRuleCall_0_0()); }
		rulevarParmArgs
		{ after(grammarAccess.getVariablesAccess().getVarParmArgsParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariablesAccess().getCallVariableParserRuleCall_0_1()); }
		ruleCallVariable
		{ after(grammarAccess.getVariablesAccess().getCallVariableParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypesAccess().getIntKeyword_0()); }
		'int'
		{ after(grammarAccess.getDataTypesAccess().getIntKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypesAccess().getBoolKeyword_1()); }
		'bool'
		{ after(grammarAccess.getDataTypesAccess().getBoolKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypesAccess().getDoublesKeyword_2()); }
		'doubles'
		{ after(grammarAccess.getDataTypesAccess().getDoublesKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypesAccess().getStringKeyword_3()); }
		'string'
		{ after(grammarAccess.getDataTypesAccess().getStringKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Data__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataAccess().getNumbersParserRuleCall_0()); }
		ruleNumbers
		{ after(grammarAccess.getDataAccess().getNumbersParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataAccess().getStringsParserRuleCall_1()); }
		ruleStrings
		{ after(grammarAccess.getDataAccess().getStringsParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataAccess().getBooleansParserRuleCall_2()); }
		ruleBooleans
		{ after(grammarAccess.getDataAccess().getBooleansParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataAccess().getDoublesParserRuleCall_3()); }
		ruleDoubles
		{ after(grammarAccess.getDataAccess().getDoublesParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Booleans__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleansAccess().getValueAssignment_0()); }
		(rule__Booleans__ValueAssignment_0)
		{ after(grammarAccess.getBooleansAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleansAccess().getGroup_1()); }
		(rule__Booleans__Group_1__0)
		{ after(grammarAccess.getBooleansAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__0__Impl
	rule__Operations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getOperationsAction_0()); }
	()
	{ after(grammarAccess.getOperationsAccess().getOperationsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__1__Impl
	rule__Operations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getClassKeyword_1()); }
	'Class'
	{ after(grammarAccess.getOperationsAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__2__Impl
	rule__Operations__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getOperationsAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__3__Impl
	rule__Operations__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getAlternatives_3()); }
	(rule__Operations__Alternatives_3)*
	{ after(grammarAccess.getOperationsAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operations__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getOperationsAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prints__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group__0__Impl
	rule__Prints__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getPrintsAction_0()); }
	()
	{ after(grammarAccess.getPrintsAccess().getPrintsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group__1__Impl
	rule__Prints__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getPrintKeyword_1()); }
	'print'
	{ after(grammarAccess.getPrintsAccess().getPrintKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group__2__Impl
	rule__Prints__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPrintsAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group__3__Impl
	rule__Prints__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getGroup_3()); }
	(rule__Prints__Group_3__0)?
	{ after(grammarAccess.getPrintsAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPrintsAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prints__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group_3__0__Impl
	rule__Prints__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getPrintAssignment_3_0()); }
	(rule__Prints__PrintAssignment_3_0)
	{ after(grammarAccess.getPrintsAccess().getPrintAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getGroup_3_1()); }
	(rule__Prints__Group_3_1__0)*
	{ after(grammarAccess.getPrintsAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prints__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group_3_1__0__Impl
	rule__Prints__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getPrintsAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prints__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintsAccess().getPrintAssignment_3_1_1()); }
	(rule__Prints__PrintAssignment_3_1_1)
	{ after(grammarAccess.getPrintsAccess().getPrintAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Functions__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__0__Impl
	rule__Functions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getFunctionKeyword_0()); }
	'Function'
	{ after(grammarAccess.getFunctionsAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__1__Impl
	rule__Functions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getOutputAssignment_1()); }
	(rule__Functions__OutputAssignment_1)
	{ after(grammarAccess.getFunctionsAccess().getOutputAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__2__Impl
	rule__Functions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getLessThanSignEqualsSignKeyword_2()); }
	'<='
	{ after(grammarAccess.getFunctionsAccess().getLessThanSignEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__3__Impl
	rule__Functions__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getNameAssignment_3()); }
	(rule__Functions__NameAssignment_3)
	{ after(grammarAccess.getFunctionsAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__4__Impl
	rule__Functions__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getParamsAssignment_4()); }
	(rule__Functions__ParamsAssignment_4)
	{ after(grammarAccess.getFunctionsAccess().getParamsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__5__Impl
	rule__Functions__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getEqualsSignGreaterThanSignKeyword_5()); }
	'=>'
	{ after(grammarAccess.getFunctionsAccess().getEqualsSignGreaterThanSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__6__Impl
	rule__Functions__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getFunctionsAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__7__Impl
	rule__Functions__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getBodyAssignment_7()); }
	(rule__Functions__BodyAssignment_7)
	{ after(grammarAccess.getFunctionsAccess().getBodyAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Functions__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionsAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getFunctionsAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bodies__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bodies__Group__0__Impl
	rule__Bodies__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bodies__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodiesAccess().getBodiesAction_0()); }
	()
	{ after(grammarAccess.getBodiesAccess().getBodiesAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bodies__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bodies__Group__1__Impl
	rule__Bodies__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bodies__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodiesAccess().getVarAssignment_1()); }
	(rule__Bodies__VarAssignment_1)*
	{ after(grammarAccess.getBodiesAccess().getVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bodies__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bodies__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bodies__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodiesAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getBodiesAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loops__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__0__Impl
	rule__Loops__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getLoopsAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__1__Impl
	rule__Loops__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLoopsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__2__Impl
	rule__Loops__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getAlternatives_2()); }
	(rule__Loops__Alternatives_2)
	{ after(grammarAccess.getLoopsAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__3__Impl
	rule__Loops__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getLoopsAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__4__Impl
	rule__Loops__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getNumberAssignment_4()); }
	(rule__Loops__NumberAssignment_4)
	{ after(grammarAccess.getLoopsAccess().getNumberAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__5__Impl
	rule__Loops__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getLoopsAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__6__Impl
	rule__Loops__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getEqualsSignGreaterThanSignKeyword_6()); }
	'=>'
	{ after(grammarAccess.getLoopsAccess().getEqualsSignGreaterThanSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__7__Impl
	rule__Loops__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getLeftCurlyBracketKeyword_7()); }
	'{'
	{ after(grammarAccess.getLoopsAccess().getLeftCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__8__Impl
	rule__Loops__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopsAccess().getBodyAssignment_8()); }
		(rule__Loops__BodyAssignment_8)
		{ after(grammarAccess.getLoopsAccess().getBodyAssignment_8()); }
	)
	(
		{ before(grammarAccess.getLoopsAccess().getBodyAssignment_8()); }
		(rule__Loops__BodyAssignment_8)*
		{ after(grammarAccess.getLoopsAccess().getBodyAssignment_8()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loops__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopsAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getLoopsAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditionals__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__0__Impl
	rule__Conditionals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getConditionalsAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__1__Impl
	rule__Conditionals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getConditionalsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__2__Impl
	rule__Conditionals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getLogicalParamsParserRuleCall_2()); }
	ruleLogicalParams
	{ after(grammarAccess.getConditionalsAccess().getLogicalParamsParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__3__Impl
	rule__Conditionals__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConditionalsAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__4__Impl
	rule__Conditionals__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getEqualsSignGreaterThanSignKeyword_4()); }
	'=>'
	{ after(grammarAccess.getConditionalsAccess().getEqualsSignGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__5__Impl
	rule__Conditionals__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getConditionalsAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__6__Impl
	rule__Conditionals__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyAssignment_6()); }
		(rule__Conditionals__BodyAssignment_6)
		{ after(grammarAccess.getConditionalsAccess().getBodyAssignment_6()); }
	)
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyAssignment_6()); }
		(rule__Conditionals__BodyAssignment_6)*
		{ after(grammarAccess.getConditionalsAccess().getBodyAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__7__Impl
	rule__Conditionals__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__8__Impl
	rule__Conditionals__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getGroup_8()); }
	(rule__Conditionals__Group_8__0)*
	{ after(grammarAccess.getConditionalsAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__9__Impl
	rule__Conditionals__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getElseKeyword_9()); }
	'else{'
	{ after(grammarAccess.getConditionalsAccess().getElseKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__10__Impl
	rule__Conditionals__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyAssignment_10()); }
		(rule__Conditionals__BodyAssignment_10)
		{ after(grammarAccess.getConditionalsAccess().getBodyAssignment_10()); }
	)
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyAssignment_10()); }
		(rule__Conditionals__BodyAssignment_10)*
		{ after(grammarAccess.getConditionalsAccess().getBodyAssignment_10()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_11()); }
	'}'
	{ after(grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditionals__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__0__Impl
	rule__Conditionals__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getElseIfKeyword_8_0()); }
	'else-if'
	{ after(grammarAccess.getConditionalsAccess().getElseIfKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__1__Impl
	rule__Conditionals__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getLeftParenthesisKeyword_8_1()); }
	'('
	{ after(grammarAccess.getConditionalsAccess().getLeftParenthesisKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__2__Impl
	rule__Conditionals__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getLogicParmsAssignment_8_2()); }
	(rule__Conditionals__LogicParmsAssignment_8_2)
	{ after(grammarAccess.getConditionalsAccess().getLogicParmsAssignment_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__3__Impl
	rule__Conditionals__Group_8__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getRightParenthesisKeyword_8_3()); }
	')'
	{ after(grammarAccess.getConditionalsAccess().getRightParenthesisKeyword_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__4__Impl
	rule__Conditionals__Group_8__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getEqualsSignGreaterThanSignKeyword_8_4()); }
	'=>'
	{ after(grammarAccess.getConditionalsAccess().getEqualsSignGreaterThanSignKeyword_8_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__5__Impl
	rule__Conditionals__Group_8__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getLeftCurlyBracketKeyword_8_5()); }
	'{'
	{ after(grammarAccess.getConditionalsAccess().getLeftCurlyBracketKeyword_8_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__6__Impl
	rule__Conditionals__Group_8__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyAssignment_8_6()); }
		(rule__Conditionals__BodyAssignment_8_6)
		{ after(grammarAccess.getConditionalsAccess().getBodyAssignment_8_6()); }
	)
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyAssignment_8_6()); }
		(rule__Conditionals__BodyAssignment_8_6)*
		{ after(grammarAccess.getConditionalsAccess().getBodyAssignment_8_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditionals__Group_8__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__Group_8__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_8_7()); }
	'}'
	{ after(grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_8_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalParams__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalParams__Group__0__Impl
	rule__LogicalParams__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalParamsAccess().getLogicalOperationParserRuleCall_0()); }
	ruleLogicalOperation
	{ after(grammarAccess.getLogicalParamsAccess().getLogicalOperationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalParams__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalParamsAccess().getGroup_1()); }
	(rule__LogicalParams__Group_1__0)*
	{ after(grammarAccess.getLogicalParamsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalParams__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalParams__Group_1__0__Impl
	rule__LogicalParams__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalParamsAccess().getBoolFuncAssignment_1_0()); }
	(rule__LogicalParams__BoolFuncAssignment_1_0)
	{ after(grammarAccess.getLogicalParamsAccess().getBoolFuncAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalParams__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalParamsAccess().getLgicOpAssignment_1_1()); }
	(rule__LogicalParams__LgicOpAssignment_1_1)
	{ after(grammarAccess.getLogicalParamsAccess().getLgicOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersOutptut__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1__0__Impl
	rule__ParametersOutptut__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getParametersOutptutAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1__1__Impl
	rule__ParametersOutptut__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getParametersOutptutAction_1_1()); }
	()
	{ after(grammarAccess.getParametersOutptutAccess().getParametersOutptutAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1__2__Impl
	rule__ParametersOutptut__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getGroup_1_2()); }
	(rule__ParametersOutptut__Group_1_2__0)?
	{ after(grammarAccess.getParametersOutptutAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getRightSquareBracketKeyword_1_3()); }
	']'
	{ after(grammarAccess.getParametersOutptutAccess().getRightSquareBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersOutptut__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1_2__0__Impl
	rule__ParametersOutptut__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getParamsAssignment_1_2_0()); }
	(rule__ParametersOutptut__ParamsAssignment_1_2_0)
	{ after(grammarAccess.getParametersOutptutAccess().getParamsAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getGroup_1_2_1()); }
	(rule__ParametersOutptut__Group_1_2_1__0)*
	{ after(grammarAccess.getParametersOutptutAccess().getGroup_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersOutptut__Group_1_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1_2_1__0__Impl
	rule__ParametersOutptut__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getCommaKeyword_1_2_1_0()); }
	','
	{ after(grammarAccess.getParametersOutptutAccess().getCommaKeyword_1_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParametersOutptut__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__Group_1_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersOutptutAccess().getParamsAssignment_1_2_1_1()); }
	(rule__ParametersOutptut__ParamsAssignment_1_2_1_1)
	{ after(grammarAccess.getParametersOutptutAccess().getParamsAssignment_1_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parametersfunc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group__0__Impl
	rule__Parametersfunc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParametersfuncAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group__1__Impl
	rule__Parametersfunc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getFunOutputsAction_1()); }
	()
	{ after(grammarAccess.getParametersfuncAccess().getFunOutputsAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group__2__Impl
	rule__Parametersfunc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getGroup_2()); }
	(rule__Parametersfunc__Group_2__0)?
	{ after(grammarAccess.getParametersfuncAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getParametersfuncAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parametersfunc__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group_2__0__Impl
	rule__Parametersfunc__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getParamsAssignment_2_0()); }
	(rule__Parametersfunc__ParamsAssignment_2_0)
	{ after(grammarAccess.getParametersfuncAccess().getParamsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getGroup_2_1()); }
	(rule__Parametersfunc__Group_2_1__0)*
	{ after(grammarAccess.getParametersfuncAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parametersfunc__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group_2_1__0__Impl
	rule__Parametersfunc__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getParametersfuncAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametersfunc__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersfuncAccess().getParamsAssignment_2_1_1()); }
	(rule__Parametersfunc__ParamsAssignment_2_1_1)
	{ after(grammarAccess.getParametersfuncAccess().getParamsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LessThan__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LessThan__Group__0__Impl
	rule__LessThan__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLessThanAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getLessThanAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LessThan__Group__1__Impl
	rule__LessThan__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLessThanAccess().getLeftAssignment_1()); }
	(rule__LessThan__LeftAssignment_1)
	{ after(grammarAccess.getLessThanAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LessThan__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLessThanAccess().getRightAssignment_2()); }
	(rule__LessThan__RightAssignment_2)
	{ after(grammarAccess.getLessThanAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterThan__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterThan__Group__0__Impl
	rule__GreaterThan__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterThanAccess().getGreaterThanSignKeyword_0()); }
	'>'
	{ after(grammarAccess.getGreaterThanAccess().getGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterThan__Group__1__Impl
	rule__GreaterThan__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterThanAccess().getLeftAssignment_1()); }
	(rule__GreaterThan__LeftAssignment_1)
	{ after(grammarAccess.getGreaterThanAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterThan__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterThanAccess().getRightAssignment_2()); }
	(rule__GreaterThan__RightAssignment_2)
	{ after(grammarAccess.getGreaterThanAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__0__Impl
	rule__Equal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getEqualsSignKeyword_0()); }
	'='
	{ after(grammarAccess.getEqualAccess().getEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__1__Impl
	rule__Equal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftAssignment_1()); }
	(rule__Equal__LeftAssignment_1)
	{ after(grammarAccess.getEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightAssignment_2()); }
	(rule__Equal__RightAssignment_2)
	{ after(grammarAccess.getEqualAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotEqual__Group__0__Impl
	rule__NotEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_0()); }
	'!='
	{ after(grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotEqual__Group__1__Impl
	rule__NotEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotEqualAccess().getLeftAssignment_1()); }
	(rule__NotEqual__LeftAssignment_1)
	{ after(grammarAccess.getNotEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotEqual__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotEqualAccess().getRightAssignment_2()); }
	(rule__NotEqual__RightAssignment_2)
	{ after(grammarAccess.getNotEqualAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LessOrEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LessOrEqual__Group__0__Impl
	rule__LessOrEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLessOrEqualAccess().getLessThanSignEqualsSignKeyword_0()); }
	'<='
	{ after(grammarAccess.getLessOrEqualAccess().getLessThanSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LessOrEqual__Group__1__Impl
	rule__LessOrEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLessOrEqualAccess().getLeftAssignment_1()); }
	(rule__LessOrEqual__LeftAssignment_1)
	{ after(grammarAccess.getLessOrEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LessOrEqual__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLessOrEqualAccess().getRightAssignment_2()); }
	(rule__LessOrEqual__RightAssignment_2)
	{ after(grammarAccess.getLessOrEqualAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterOrEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterOrEqual__Group__0__Impl
	rule__GreaterOrEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterOrEqualAccess().getGreaterThanSignEqualsSignKeyword_0()); }
	'>='
	{ after(grammarAccess.getGreaterOrEqualAccess().getGreaterThanSignEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterOrEqual__Group__1__Impl
	rule__GreaterOrEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterOrEqualAccess().getLeftAssignment_1()); }
	(rule__GreaterOrEqual__LeftAssignment_1)
	{ after(grammarAccess.getGreaterOrEqualAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterOrEqual__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterOrEqualAccess().getRightAssignment_2()); }
	(rule__GreaterOrEqual__RightAssignment_2)
	{ after(grammarAccess.getGreaterOrEqualAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ands__Group__0__Impl
	rule__Ands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndsAccess().getAmpersandAmpersandKeyword_0()); }
	'&&'
	{ after(grammarAccess.getAndsAccess().getAmpersandAmpersandKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ands__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAndsAccess().getPrimaryAssignment_1()); }
		(rule__Ands__PrimaryAssignment_1)
		{ after(grammarAccess.getAndsAccess().getPrimaryAssignment_1()); }
	)
	(
		{ before(grammarAccess.getAndsAccess().getPrimaryAssignment_1()); }
		(rule__Ands__PrimaryAssignment_1)*
		{ after(grammarAccess.getAndsAccess().getPrimaryAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ors__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ors__Group__0__Impl
	rule__Ors__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ors__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrsAccess().getVerticalLineVerticalLineKeyword_0()); }
	'||'
	{ after(grammarAccess.getOrsAccess().getVerticalLineVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ors__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ors__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ors__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOrsAccess().getPrimaryAssignment_1()); }
		(rule__Ors__PrimaryAssignment_1)
		{ after(grammarAccess.getOrsAccess().getPrimaryAssignment_1()); }
	)
	(
		{ before(grammarAccess.getOrsAccess().getPrimaryAssignment_1()); }
		(rule__Ors__PrimaryAssignment_1)*
		{ after(grammarAccess.getOrsAccess().getPrimaryAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nots__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nots__Group__0__Impl
	rule__Nots__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nots__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotsAccess().getExclamationMarkKeyword_0()); }
	'!'
	{ after(grammarAccess.getNotsAccess().getExclamationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nots__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nots__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nots__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNotsAccess().getPrimaryAssignment_1()); }
		(rule__Nots__PrimaryAssignment_1)
		{ after(grammarAccess.getNotsAccess().getPrimaryAssignment_1()); }
	)
	(
		{ before(grammarAccess.getNotsAccess().getPrimaryAssignment_1()); }
		(rule__Nots__PrimaryAssignment_1)*
		{ after(grammarAccess.getNotsAccess().getPrimaryAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nors__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nors__Group__0__Impl
	rule__Nors__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nors__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNorsAccess().getNorKeyword_0()); }
	'nor'
	{ after(grammarAccess.getNorsAccess().getNorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nors__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nors__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nors__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNorsAccess().getPrimaryAssignment_1()); }
		(rule__Nors__PrimaryAssignment_1)
		{ after(grammarAccess.getNorsAccess().getPrimaryAssignment_1()); }
	)
	(
		{ before(grammarAccess.getNorsAccess().getPrimaryAssignment_1()); }
		(rule__Nors__PrimaryAssignment_1)*
		{ after(grammarAccess.getNorsAccess().getPrimaryAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nands__Group__0__Impl
	rule__Nands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandsAccess().getNandKeyword_0()); }
	'nand'
	{ after(grammarAccess.getNandsAccess().getNandKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nands__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNandsAccess().getPrimaryAssignment_1()); }
		(rule__Nands__PrimaryAssignment_1)
		{ after(grammarAccess.getNandsAccess().getPrimaryAssignment_1()); }
	)
	(
		{ before(grammarAccess.getNandsAccess().getPrimaryAssignment_1()); }
		(rule__Nands__PrimaryAssignment_1)*
		{ after(grammarAccess.getNandsAccess().getPrimaryAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__0__Impl
	rule__Sum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getSubsParserRuleCall_0()); }
	ruleSubs
	{ after(grammarAccess.getSumAccess().getSubsParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getGroup_1()); }
	(rule__Sum__Group_1__0)*
	{ after(grammarAccess.getSumAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1__0__Impl
	rule__Sum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getSumLeftAction_1_0()); }
	()
	{ after(grammarAccess.getSumAccess().getSumLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1__1__Impl
	rule__Sum__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getSumAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sum__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSumAccess().getRightAssignment_1_2()); }
	(rule__Sum__RightAssignment_1_2)
	{ after(grammarAccess.getSumAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subs__Group__0__Impl
	rule__Subs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubsAccess().getDivitionParserRuleCall_0()); }
	ruleDivition
	{ after(grammarAccess.getSubsAccess().getDivitionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubsAccess().getGroup_1()); }
	(rule__Subs__Group_1__0)*
	{ after(grammarAccess.getSubsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subs__Group_1__0__Impl
	rule__Subs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubsAccess().getSubsLeftAction_1_0()); }
	()
	{ after(grammarAccess.getSubsAccess().getSubsLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subs__Group_1__1__Impl
	rule__Subs__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubsAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getSubsAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subs__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubsAccess().getRightAssignment_1_2()); }
	(rule__Subs__RightAssignment_1_2)
	{ after(grammarAccess.getSubsAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divition__Group__0__Impl
	rule__Divition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivitionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getDivitionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivitionAccess().getGroup_1()); }
	(rule__Divition__Group_1__0)*
	{ after(grammarAccess.getDivitionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divition__Group_1__0__Impl
	rule__Divition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivitionAccess().getDivitionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDivitionAccess().getDivitionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divition__Group_1__1__Impl
	rule__Divition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivitionAccess().getSolidusKeyword_1_1()); }
	'/'
	{ after(grammarAccess.getDivitionAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivitionAccess().getRightAssignment_1_2()); }
	(rule__Divition__RightAssignment_1_2)
	{ after(grammarAccess.getDivitionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
	'*'
	{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CallFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallFunction__Group__0__Impl
	rule__CallFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallFunctionAccess().getFuncAssignment_0()); }
	(rule__CallFunction__FuncAssignment_0)
	{ after(grammarAccess.getCallFunctionAccess().getFuncAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallFunction__Group__1__Impl
	rule__CallFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCallFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallFunction__Group__2__Impl
	rule__CallFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallFunctionAccess().getExpAssignment_2()); }
	(rule__CallFunction__ExpAssignment_2)
	{ after(grammarAccess.getCallFunctionAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CallFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCallFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__0__Impl
	rule__Variables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getAlternatives_0()); }
	(rule__Variables__Alternatives_0)
	{ after(grammarAccess.getVariablesAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__1__Impl
	rule__Variables__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getLessThanSignEqualsSignKeyword_1()); }
	'<='
	{ after(grammarAccess.getVariablesAccess().getLessThanSignEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__2__Impl
	rule__Variables__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getExpAssignment_2()); }
	(rule__Variables__ExpAssignment_2)
	{ after(grammarAccess.getVariablesAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getVariablesAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarParmArgs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarParmArgs__Group__0__Impl
	rule__VarParmArgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarParmArgsAccess().getNameAssignment_0()); }
	(rule__VarParmArgs__NameAssignment_0)
	{ after(grammarAccess.getVarParmArgsAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarParmArgs__Group__1__Impl
	rule__VarParmArgs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarParmArgsAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getVarParmArgsAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarParmArgs__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarParmArgsAccess().getDataTypeAssignment_2()); }
	(rule__VarParmArgs__DataTypeAssignment_2)
	{ after(grammarAccess.getVarParmArgsAccess().getDataTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Booleans__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Booleans__Group_1__0__Impl
	rule__Booleans__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Booleans__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleansAccess().getBooleansAction_1_0()); }
	()
	{ after(grammarAccess.getBooleansAccess().getBooleansAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Booleans__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Booleans__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Booleans__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleansAccess().getFalseKeyword_1_1()); }
	'false'
	{ after(grammarAccess.getBooleansAccess().getFalseKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operations__FuncAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getFuncFunctionsParserRuleCall_3_0_0()); }
		ruleFunctions
		{ after(grammarAccess.getOperationsAccess().getFuncFunctionsParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__VarAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getVarVariablesParserRuleCall_3_1_0()); }
		ruleVariables
		{ after(grammarAccess.getOperationsAccess().getVarVariablesParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__ConditionalAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getConditionalConditionalsParserRuleCall_3_2_0()); }
		ruleConditionals
		{ after(grammarAccess.getOperationsAccess().getConditionalConditionalsParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__LoopsAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getLoopsLoopsParserRuleCall_3_3_0()); }
		ruleLoops
		{ after(grammarAccess.getOperationsAccess().getLoopsLoopsParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operations__PrintAssignment_3_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsAccess().getPrintPrintsParserRuleCall_3_4_0()); }
		rulePrints
		{ after(grammarAccess.getOperationsAccess().getPrintPrintsParserRuleCall_3_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__PrintAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintsAccess().getPrintParmsPrintParserRuleCall_3_0_0()); }
		ruleParmsPrint
		{ after(grammarAccess.getPrintsAccess().getPrintParmsPrintParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prints__PrintAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintsAccess().getPrintParmsPrintParserRuleCall_3_1_1_0()); }
		ruleParmsPrint
		{ after(grammarAccess.getPrintsAccess().getPrintParmsPrintParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Names__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamesAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getNamesAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__OutputAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionsAccess().getOutputParametersOutptutParserRuleCall_1_0()); }
		ruleParametersOutptut
		{ after(grammarAccess.getFunctionsAccess().getOutputParametersOutptutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionsAccess().getNameNamesParserRuleCall_3_0()); }
		ruleNames
		{ after(grammarAccess.getFunctionsAccess().getNameNamesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__ParamsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionsAccess().getParamsParametersfuncParserRuleCall_4_0()); }
		ruleParametersfunc
		{ after(grammarAccess.getFunctionsAccess().getParamsParametersfuncParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Functions__BodyAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionsAccess().getBodyBodiesParserRuleCall_7_0()); }
		ruleBodies
		{ after(grammarAccess.getFunctionsAccess().getBodyBodiesParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bodies__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodiesAccess().getVarVariablesParserRuleCall_1_0()); }
		ruleVariables
		{ after(grammarAccess.getBodiesAccess().getVarVariablesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__NumberAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopsAccess().getNumberNumbersParserRuleCall_4_0()); }
		ruleNumbers
		{ after(grammarAccess.getLoopsAccess().getNumberNumbersParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loops__BodyAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopsAccess().getBodyBodiesParserRuleCall_8_0()); }
		ruleBodies
		{ after(grammarAccess.getLoopsAccess().getBodyBodiesParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_6_0()); }
		ruleBodies
		{ after(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__LogicParmsAssignment_8_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalsAccess().getLogicParmsLogicalParamsParserRuleCall_8_2_0()); }
		ruleLogicalParams
		{ after(grammarAccess.getConditionalsAccess().getLogicParmsLogicalParamsParserRuleCall_8_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__BodyAssignment_8_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_8_6_0()); }
		ruleBodies
		{ after(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_8_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditionals__BodyAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_10_0()); }
		ruleBodies
		{ after(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__BoolFuncAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalParamsAccess().getBoolFuncBooleanFunctionParserRuleCall_1_0_0()); }
		ruleBooleanFunction
		{ after(grammarAccess.getLogicalParamsAccess().getBoolFuncBooleanFunctionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalParams__LgicOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalParamsAccess().getLgicOpLogicalOperationParserRuleCall_1_1_0()); }
		ruleLogicalOperation
		{ after(grammarAccess.getLogicalParamsAccess().getLgicOpLogicalOperationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__ParamAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersOutptutAccess().getParamVarParmArgsParserRuleCall_0_0()); }
		rulevarParmArgs
		{ after(grammarAccess.getParametersOutptutAccess().getParamVarParmArgsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__ParamsAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersOutptutAccess().getParamsVarParmArgsParserRuleCall_1_2_0_0()); }
		rulevarParmArgs
		{ after(grammarAccess.getParametersOutptutAccess().getParamsVarParmArgsParserRuleCall_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersOutptut__ParamsAssignment_1_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersOutptutAccess().getParamsVarParmArgsParserRuleCall_1_2_1_1_0()); }
		rulevarParmArgs
		{ after(grammarAccess.getParametersOutptutAccess().getParamsVarParmArgsParserRuleCall_1_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__ParamsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersfuncAccess().getParamsExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getParametersfuncAccess().getParamsExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametersfunc__ParamsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersfuncAccess().getParamsExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getParametersfuncAccess().getParamsExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOpOperationParserRuleCall_0()); }
		ruleOperation
		{ after(grammarAccess.getExpressionAccess().getOpOperationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLessThanAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getLessThanAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessThan__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLessThanAccess().getRightPrimaryParserRuleCall_2_0()); }
		rulePrimary
		{ after(grammarAccess.getLessThanAccess().getRightPrimaryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterThanAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getGreaterThanAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterThan__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterThanAccess().getRightPrimaryParserRuleCall_2_0()); }
		rulePrimary
		{ after(grammarAccess.getGreaterThanAccess().getRightPrimaryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
		rulePrimary
		{ after(grammarAccess.getEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getNotEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotEqual__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
		rulePrimary
		{ after(grammarAccess.getNotEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLessOrEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getLessOrEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LessOrEqual__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLessOrEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
		rulePrimary
		{ after(grammarAccess.getLessOrEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterOrEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getGreaterOrEqualAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterOrEqual__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterOrEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
		rulePrimary
		{ after(grammarAccess.getGreaterOrEqualAccess().getRightPrimaryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ands__PrimaryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getAndsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ors__PrimaryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getOrsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nots__PrimaryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getNotsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nors__PrimaryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNorsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getNorsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nands__PrimaryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNandsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getNandsAccess().getPrimaryPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AritmeticOperation__SumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAritmeticOperationAccess().getSumSumParserRuleCall_0()); }
		ruleSum
		{ after(grammarAccess.getAritmeticOperationAccess().getSumSumParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSumAccess().getRightSubsParserRuleCall_1_2_0()); }
		ruleSubs
		{ after(grammarAccess.getSumAccess().getRightSubsParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subs__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubsAccess().getRightDivitionParserRuleCall_1_2_0()); }
		ruleDivition
		{ after(grammarAccess.getSubsAccess().getRightDivitionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivitionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getDivitionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getVarVariablesCrossReference_1_0()); }
		(
			{ before(grammarAccess.getPrimaryAccess().getVarVariablesIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryAccess().getVarVariablesIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryAccess().getVarVariablesCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__FuncAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallFunctionAccess().getFuncFunctionsCrossReference_0_0()); }
		(
			{ before(grammarAccess.getCallFunctionAccess().getFuncFunctionsIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCallFunctionAccess().getFuncFunctionsIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getCallFunctionAccess().getFuncFunctionsCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallFunction__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallFunctionAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getCallFunctionAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getVariablesAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CallVariable__VarsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallVariableAccess().getVarsVariablesCrossReference_0()); }
		(
			{ before(grammarAccess.getCallVariableAccess().getVarsVariablesIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCallVariableAccess().getVarsVariablesIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getCallVariableAccess().getVarsVariablesCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarParmArgsAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVarParmArgsAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarParmArgs__DataTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarParmArgsAccess().getDataTypeDataTypesParserRuleCall_2_0()); }
		ruleDataTypes
		{ after(grammarAccess.getVarParmArgsAccess().getDataTypeDataTypesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumbersAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Strings__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringsAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringsAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Booleans__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleansAccess().getValueTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleansAccess().getValueTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBooleansAccess().getValueTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleansAccess().getValueTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doubles__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoublesAccess().getValueDOUBLETerminalRuleCall_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getDoublesAccess().getValueDOUBLETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : ('0'..'9')+ '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
