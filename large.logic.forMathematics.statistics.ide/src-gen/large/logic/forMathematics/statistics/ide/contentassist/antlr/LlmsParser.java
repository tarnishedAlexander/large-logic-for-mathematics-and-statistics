/*
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import large.logic.forMathematics.statistics.ide.contentassist.antlr.internal.InternalLlmsParser;
import large.logic.forMathematics.statistics.services.LlmsGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LlmsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LlmsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LlmsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOperationsAccess().getAlternatives_4(), "rule__Operations__Alternatives_4");
			builder.put(grammarAccess.getParmsPrintAccess().getAlternatives(), "rule__ParmsPrint__Alternatives");
			builder.put(grammarAccess.getLoopsAccess().getAlternatives_2(), "rule__Loops__Alternatives_2");
			builder.put(grammarAccess.getParametersOutptutAccess().getAlternatives(), "rule__ParametersOutptut__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getLogicalOperationAccess().getAlternatives(), "rule__LogicalOperation__Alternatives");
			builder.put(grammarAccess.getBooleanFunctionAccess().getAlternatives(), "rule__BooleanFunction__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getVariablesAccess().getTypesVarsAlternatives_0_0(), "rule__Variables__TypesVarsAlternatives_0_0");
			builder.put(grammarAccess.getDataTypesAccess().getAlternatives(), "rule__DataTypes__Alternatives");
			builder.put(grammarAccess.getDataAccess().getAlternatives(), "rule__Data__Alternatives");
			builder.put(grammarAccess.getBooleansAccess().getAlternatives(), "rule__Booleans__Alternatives");
			builder.put(grammarAccess.getOperationsAccess().getGroup(), "rule__Operations__Group__0");
			builder.put(grammarAccess.getPrintsAccess().getGroup(), "rule__Prints__Group__0");
			builder.put(grammarAccess.getPrintsAccess().getGroup_3(), "rule__Prints__Group_3__0");
			builder.put(grammarAccess.getPrintsAccess().getGroup_3_1(), "rule__Prints__Group_3_1__0");
			builder.put(grammarAccess.getFunctionsAccess().getGroup(), "rule__Functions__Group__0");
			builder.put(grammarAccess.getBodiesAccess().getGroup(), "rule__Bodies__Group__0");
			builder.put(grammarAccess.getLoopsAccess().getGroup(), "rule__Loops__Group__0");
			builder.put(grammarAccess.getConditionalsAccess().getGroup(), "rule__Conditionals__Group__0");
			builder.put(grammarAccess.getConditionalsAccess().getGroup_8(), "rule__Conditionals__Group_8__0");
			builder.put(grammarAccess.getLogicalParamsAccess().getGroup(), "rule__LogicalParams__Group__0");
			builder.put(grammarAccess.getLogicalParamsAccess().getGroup_1(), "rule__LogicalParams__Group_1__0");
			builder.put(grammarAccess.getParametersOutptutAccess().getGroup_1(), "rule__ParametersOutptut__Group_1__0");
			builder.put(grammarAccess.getParametersOutptutAccess().getGroup_1_2(), "rule__ParametersOutptut__Group_1_2__0");
			builder.put(grammarAccess.getParametersOutptutAccess().getGroup_1_2_1(), "rule__ParametersOutptut__Group_1_2_1__0");
			builder.put(grammarAccess.getParametersfuncAccess().getGroup(), "rule__Parametersfunc__Group__0");
			builder.put(grammarAccess.getParametersfuncAccess().getGroup_2(), "rule__Parametersfunc__Group_2__0");
			builder.put(grammarAccess.getParametersfuncAccess().getGroup_2_1(), "rule__Parametersfunc__Group_2_1__0");
			builder.put(grammarAccess.getLessThanAccess().getGroup(), "rule__LessThan__Group__0");
			builder.put(grammarAccess.getGreaterThanAccess().getGroup(), "rule__GreaterThan__Group__0");
			builder.put(grammarAccess.getEqualAccess().getGroup(), "rule__Equal__Group__0");
			builder.put(grammarAccess.getNotEqualAccess().getGroup(), "rule__NotEqual__Group__0");
			builder.put(grammarAccess.getLessOrEqualAccess().getGroup(), "rule__LessOrEqual__Group__0");
			builder.put(grammarAccess.getGreaterOrEqualAccess().getGroup(), "rule__GreaterOrEqual__Group__0");
			builder.put(grammarAccess.getAndsAccess().getGroup(), "rule__Ands__Group__0");
			builder.put(grammarAccess.getOrsAccess().getGroup(), "rule__Ors__Group__0");
			builder.put(grammarAccess.getNotsAccess().getGroup(), "rule__Nots__Group__0");
			builder.put(grammarAccess.getNorsAccess().getGroup(), "rule__Nors__Group__0");
			builder.put(grammarAccess.getNandsAccess().getGroup(), "rule__Nands__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1(), "rule__Sum__Group_1__0");
			builder.put(grammarAccess.getSubsAccess().getGroup(), "rule__Subs__Group__0");
			builder.put(grammarAccess.getSubsAccess().getGroup_1(), "rule__Subs__Group_1__0");
			builder.put(grammarAccess.getDivitionAccess().getGroup(), "rule__Divition__Group__0");
			builder.put(grammarAccess.getDivitionAccess().getGroup_1(), "rule__Divition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getCallFunctionAccess().getGroup(), "rule__CallFunction__Group__0");
			builder.put(grammarAccess.getCallFunctionAccess().getGroup_2(), "rule__CallFunction__Group_2__0");
			builder.put(grammarAccess.getCallFunctionAccess().getGroup_2_1(), "rule__CallFunction__Group_2_1__0");
			builder.put(grammarAccess.getVariablesAccess().getGroup(), "rule__Variables__Group__0");
			builder.put(grammarAccess.getVarParmArgsAccess().getGroup(), "rule__VarParmArgs__Group__0");
			builder.put(grammarAccess.getBooleansAccess().getGroup_1(), "rule__Booleans__Group_1__0");
			builder.put(grammarAccess.getOperationsAccess().getNameAssignment_2(), "rule__Operations__NameAssignment_2");
			builder.put(grammarAccess.getOperationsAccess().getFuncAssignment_4_0(), "rule__Operations__FuncAssignment_4_0");
			builder.put(grammarAccess.getOperationsAccess().getVarsAssignment_4_1(), "rule__Operations__VarsAssignment_4_1");
			builder.put(grammarAccess.getOperationsAccess().getConditionalAssignment_4_2(), "rule__Operations__ConditionalAssignment_4_2");
			builder.put(grammarAccess.getOperationsAccess().getLoopsAssignment_4_3(), "rule__Operations__LoopsAssignment_4_3");
			builder.put(grammarAccess.getOperationsAccess().getPrintAssignment_4_4(), "rule__Operations__PrintAssignment_4_4");
			builder.put(grammarAccess.getPrintsAccess().getPrintAssignment_3_0(), "rule__Prints__PrintAssignment_3_0");
			builder.put(grammarAccess.getPrintsAccess().getPrintAssignment_3_1_1(), "rule__Prints__PrintAssignment_3_1_1");
			builder.put(grammarAccess.getNamesAccess().getNameAssignment(), "rule__Names__NameAssignment");
			builder.put(grammarAccess.getFunctionsAccess().getOutputAssignment_1(), "rule__Functions__OutputAssignment_1");
			builder.put(grammarAccess.getFunctionsAccess().getNameAssignment_3(), "rule__Functions__NameAssignment_3");
			builder.put(grammarAccess.getFunctionsAccess().getParamsAssignment_4(), "rule__Functions__ParamsAssignment_4");
			builder.put(grammarAccess.getFunctionsAccess().getBodyAssignment_7(), "rule__Functions__BodyAssignment_7");
			builder.put(grammarAccess.getBodiesAccess().getVarAssignment_1(), "rule__Bodies__VarAssignment_1");
			builder.put(grammarAccess.getLoopsAccess().getNumberAssignment_4(), "rule__Loops__NumberAssignment_4");
			builder.put(grammarAccess.getLoopsAccess().getBodyAssignment_8(), "rule__Loops__BodyAssignment_8");
			builder.put(grammarAccess.getConditionalsAccess().getBodyAssignment_6(), "rule__Conditionals__BodyAssignment_6");
			builder.put(grammarAccess.getConditionalsAccess().getLogicParmsAssignment_8_2(), "rule__Conditionals__LogicParmsAssignment_8_2");
			builder.put(grammarAccess.getConditionalsAccess().getBodyAssignment_8_6(), "rule__Conditionals__BodyAssignment_8_6");
			builder.put(grammarAccess.getConditionalsAccess().getBodyAssignment_10(), "rule__Conditionals__BodyAssignment_10");
			builder.put(grammarAccess.getLogicalParamsAccess().getBoolFuncAssignment_1_0(), "rule__LogicalParams__BoolFuncAssignment_1_0");
			builder.put(grammarAccess.getLogicalParamsAccess().getLgicOpAssignment_1_1(), "rule__LogicalParams__LgicOpAssignment_1_1");
			builder.put(grammarAccess.getParametersOutptutAccess().getParamAssignment_0(), "rule__ParametersOutptut__ParamAssignment_0");
			builder.put(grammarAccess.getParametersOutptutAccess().getParamsAssignment_1_2_0(), "rule__ParametersOutptut__ParamsAssignment_1_2_0");
			builder.put(grammarAccess.getParametersOutptutAccess().getParamsAssignment_1_2_1_1(), "rule__ParametersOutptut__ParamsAssignment_1_2_1_1");
			builder.put(grammarAccess.getParametersfuncAccess().getParamsAssignment_2_0(), "rule__Parametersfunc__ParamsAssignment_2_0");
			builder.put(grammarAccess.getParametersfuncAccess().getParamsAssignment_2_1_1(), "rule__Parametersfunc__ParamsAssignment_2_1_1");
			builder.put(grammarAccess.getExpressionAccess().getOpAssignment(), "rule__Expression__OpAssignment");
			builder.put(grammarAccess.getLessThanAccess().getLeftAssignment_1(), "rule__LessThan__LeftAssignment_1");
			builder.put(grammarAccess.getLessThanAccess().getRightAssignment_2(), "rule__LessThan__RightAssignment_2");
			builder.put(grammarAccess.getGreaterThanAccess().getLeftAssignment_1(), "rule__GreaterThan__LeftAssignment_1");
			builder.put(grammarAccess.getGreaterThanAccess().getRightAssignment_2(), "rule__GreaterThan__RightAssignment_2");
			builder.put(grammarAccess.getEqualAccess().getLeftAssignment_1(), "rule__Equal__LeftAssignment_1");
			builder.put(grammarAccess.getEqualAccess().getRightAssignment_2(), "rule__Equal__RightAssignment_2");
			builder.put(grammarAccess.getNotEqualAccess().getLeftAssignment_1(), "rule__NotEqual__LeftAssignment_1");
			builder.put(grammarAccess.getNotEqualAccess().getRightAssignment_2(), "rule__NotEqual__RightAssignment_2");
			builder.put(grammarAccess.getLessOrEqualAccess().getLeftAssignment_1(), "rule__LessOrEqual__LeftAssignment_1");
			builder.put(grammarAccess.getLessOrEqualAccess().getRightAssignment_2(), "rule__LessOrEqual__RightAssignment_2");
			builder.put(grammarAccess.getGreaterOrEqualAccess().getLeftAssignment_1(), "rule__GreaterOrEqual__LeftAssignment_1");
			builder.put(grammarAccess.getGreaterOrEqualAccess().getRightAssignment_2(), "rule__GreaterOrEqual__RightAssignment_2");
			builder.put(grammarAccess.getAndsAccess().getPrimaryAssignment_1(), "rule__Ands__PrimaryAssignment_1");
			builder.put(grammarAccess.getOrsAccess().getPrimaryAssignment_1(), "rule__Ors__PrimaryAssignment_1");
			builder.put(grammarAccess.getNotsAccess().getPrimaryAssignment_1(), "rule__Nots__PrimaryAssignment_1");
			builder.put(grammarAccess.getNorsAccess().getPrimaryAssignment_1(), "rule__Nors__PrimaryAssignment_1");
			builder.put(grammarAccess.getNandsAccess().getPrimaryAssignment_1(), "rule__Nands__PrimaryAssignment_1");
			builder.put(grammarAccess.getAritmeticOperationAccess().getSumAssignment(), "rule__AritmeticOperation__SumAssignment");
			builder.put(grammarAccess.getSumAccess().getRightAssignment_1_2(), "rule__Sum__RightAssignment_1_2");
			builder.put(grammarAccess.getSubsAccess().getRightAssignment_1_2(), "rule__Subs__RightAssignment_1_2");
			builder.put(grammarAccess.getDivitionAccess().getRightAssignment_1_2(), "rule__Divition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getVarAssignment_1(), "rule__Primary__VarAssignment_1");
			builder.put(grammarAccess.getCallFunctionAccess().getFuncAssignment_0(), "rule__CallFunction__FuncAssignment_0");
			builder.put(grammarAccess.getCallFunctionAccess().getExpAssignment_2_0(), "rule__CallFunction__ExpAssignment_2_0");
			builder.put(grammarAccess.getCallFunctionAccess().getExpAssignment_2_1_1(), "rule__CallFunction__ExpAssignment_2_1_1");
			builder.put(grammarAccess.getVariablesAccess().getTypesVarsAssignment_0(), "rule__Variables__TypesVarsAssignment_0");
			builder.put(grammarAccess.getVariablesAccess().getExpAssignment_2(), "rule__Variables__ExpAssignment_2");
			builder.put(grammarAccess.getCallVariableAccess().getVarsAssignment(), "rule__CallVariable__VarsAssignment");
			builder.put(grammarAccess.getVarParmArgsAccess().getNameAssignment_0(), "rule__VarParmArgs__NameAssignment_0");
			builder.put(grammarAccess.getVarParmArgsAccess().getDataTypeAssignment_2(), "rule__VarParmArgs__DataTypeAssignment_2");
			builder.put(grammarAccess.getNumbersAccess().getValueAssignment(), "rule__Numbers__ValueAssignment");
			builder.put(grammarAccess.getStringsAccess().getValueAssignment(), "rule__Strings__ValueAssignment");
			builder.put(grammarAccess.getBooleansAccess().getValueAssignment_0(), "rule__Booleans__ValueAssignment_0");
			builder.put(grammarAccess.getDoublesAccess().getValueAssignment(), "rule__Doubles__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LlmsGrammarAccess grammarAccess;

	@Override
	protected InternalLlmsParser createParser() {
		InternalLlmsParser result = new InternalLlmsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LlmsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LlmsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
