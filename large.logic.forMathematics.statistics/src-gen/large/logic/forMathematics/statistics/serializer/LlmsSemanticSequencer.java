/*
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.serializer;

import com.google.inject.Inject;
import java.util.Set;
import large.logic.forMathematics.statistics.llms.Ands;
import large.logic.forMathematics.statistics.llms.AritmeticOperation;
import large.logic.forMathematics.statistics.llms.Assignment;
import large.logic.forMathematics.statistics.llms.Bodies;
import large.logic.forMathematics.statistics.llms.Booleans;
import large.logic.forMathematics.statistics.llms.CallFunction;
import large.logic.forMathematics.statistics.llms.CallVariable;
import large.logic.forMathematics.statistics.llms.Conditionals;
import large.logic.forMathematics.statistics.llms.Divition;
import large.logic.forMathematics.statistics.llms.Doubles;
import large.logic.forMathematics.statistics.llms.ElseIfs;
import large.logic.forMathematics.statistics.llms.Elses;
import large.logic.forMathematics.statistics.llms.Equal;
import large.logic.forMathematics.statistics.llms.Expression;
import large.logic.forMathematics.statistics.llms.Fors;
import large.logic.forMathematics.statistics.llms.Functions;
import large.logic.forMathematics.statistics.llms.GreaterOrEqual;
import large.logic.forMathematics.statistics.llms.GreaterThan;
import large.logic.forMathematics.statistics.llms.Ifs;
import large.logic.forMathematics.statistics.llms.LessOrEqual;
import large.logic.forMathematics.statistics.llms.LessThan;
import large.logic.forMathematics.statistics.llms.LlmsPackage;
import large.logic.forMathematics.statistics.llms.Multiplication;
import large.logic.forMathematics.statistics.llms.Nands;
import large.logic.forMathematics.statistics.llms.Nors;
import large.logic.forMathematics.statistics.llms.NotEqual;
import large.logic.forMathematics.statistics.llms.Nots;
import large.logic.forMathematics.statistics.llms.Numbers;
import large.logic.forMathematics.statistics.llms.OnlyVar;
import large.logic.forMathematics.statistics.llms.Operations;
import large.logic.forMathematics.statistics.llms.Ors;
import large.logic.forMathematics.statistics.llms.ParametersOutptut;
import large.logic.forMathematics.statistics.llms.Prints;
import large.logic.forMathematics.statistics.llms.Strings;
import large.logic.forMathematics.statistics.llms.Subs;
import large.logic.forMathematics.statistics.llms.Sum;
import large.logic.forMathematics.statistics.llms.Whiles;
import large.logic.forMathematics.statistics.llms.funOutputs;
import large.logic.forMathematics.statistics.llms.varParmArgs;
import large.logic.forMathematics.statistics.services.LlmsGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LlmsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LlmsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LlmsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LlmsPackage.ANDS:
				sequence_Ands(context, (Ands) semanticObject); 
				return; 
			case LlmsPackage.ARITMETIC_OPERATION:
				sequence_AritmeticOperation(context, (AritmeticOperation) semanticObject); 
				return; 
			case LlmsPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case LlmsPackage.BODIES:
				sequence_Bodies(context, (Bodies) semanticObject); 
				return; 
			case LlmsPackage.BOOLEANS:
				sequence_Booleans(context, (Booleans) semanticObject); 
				return; 
			case LlmsPackage.CALL_FUNCTION:
				sequence_CallFunction(context, (CallFunction) semanticObject); 
				return; 
			case LlmsPackage.CALL_VARIABLE:
				sequence_CallVariable(context, (CallVariable) semanticObject); 
				return; 
			case LlmsPackage.CONDITIONALS:
				sequence_Conditionals(context, (Conditionals) semanticObject); 
				return; 
			case LlmsPackage.DIVITION:
				sequence_Divition(context, (Divition) semanticObject); 
				return; 
			case LlmsPackage.DOUBLES:
				sequence_Doubles(context, (Doubles) semanticObject); 
				return; 
			case LlmsPackage.ELSE_IFS:
				sequence_ElseIfs(context, (ElseIfs) semanticObject); 
				return; 
			case LlmsPackage.ELSES:
				sequence_Elses(context, (Elses) semanticObject); 
				return; 
			case LlmsPackage.EQUAL:
				if (rule == grammarAccess.getOperationRule()
						|| rule == grammarAccess.getLogicalOperationRule()
						|| rule == grammarAccess.getEqualRule()) {
					sequence_Equal(context, (Equal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLogicalParamsRule()) {
					sequence_Equal_LogicalParams(context, (Equal) semanticObject); 
					return; 
				}
				else break;
			case LlmsPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case LlmsPackage.FORS:
				sequence_Fors(context, (Fors) semanticObject); 
				return; 
			case LlmsPackage.FUNCTIONS:
				sequence_Functions(context, (Functions) semanticObject); 
				return; 
			case LlmsPackage.GREATER_OR_EQUAL:
				if (rule == grammarAccess.getOperationRule()
						|| rule == grammarAccess.getLogicalOperationRule()
						|| rule == grammarAccess.getGreaterOrEqualRule()) {
					sequence_GreaterOrEqual(context, (GreaterOrEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLogicalParamsRule()) {
					sequence_GreaterOrEqual_LogicalParams(context, (GreaterOrEqual) semanticObject); 
					return; 
				}
				else break;
			case LlmsPackage.GREATER_THAN:
				if (rule == grammarAccess.getOperationRule()
						|| rule == grammarAccess.getLogicalOperationRule()
						|| rule == grammarAccess.getGreaterThanRule()) {
					sequence_GreaterThan(context, (GreaterThan) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLogicalParamsRule()) {
					sequence_GreaterThan_LogicalParams(context, (GreaterThan) semanticObject); 
					return; 
				}
				else break;
			case LlmsPackage.IFS:
				sequence_Ifs(context, (Ifs) semanticObject); 
				return; 
			case LlmsPackage.LESS_OR_EQUAL:
				if (rule == grammarAccess.getOperationRule()
						|| rule == grammarAccess.getLogicalOperationRule()
						|| rule == grammarAccess.getLessOrEqualRule()) {
					sequence_LessOrEqual(context, (LessOrEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLogicalParamsRule()) {
					sequence_LessOrEqual_LogicalParams(context, (LessOrEqual) semanticObject); 
					return; 
				}
				else break;
			case LlmsPackage.LESS_THAN:
				if (rule == grammarAccess.getOperationRule()
						|| rule == grammarAccess.getLogicalOperationRule()
						|| rule == grammarAccess.getLessThanRule()) {
					sequence_LessThan(context, (LessThan) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLogicalParamsRule()) {
					sequence_LessThan_LogicalParams(context, (LessThan) semanticObject); 
					return; 
				}
				else break;
			case LlmsPackage.MULTIPLICATION:
				sequence_Multiplication(context, (Multiplication) semanticObject); 
				return; 
			case LlmsPackage.NANDS:
				sequence_Nands(context, (Nands) semanticObject); 
				return; 
			case LlmsPackage.NORS:
				sequence_Nors(context, (Nors) semanticObject); 
				return; 
			case LlmsPackage.NOT_EQUAL:
				if (rule == grammarAccess.getLogicalParamsRule()) {
					sequence_LogicalParams_NotEqual(context, (NotEqual) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationRule()
						|| rule == grammarAccess.getLogicalOperationRule()
						|| rule == grammarAccess.getNotEqualRule()) {
					sequence_NotEqual(context, (NotEqual) semanticObject); 
					return; 
				}
				else break;
			case LlmsPackage.NOTS:
				sequence_Nots(context, (Nots) semanticObject); 
				return; 
			case LlmsPackage.NUMBERS:
				sequence_Numbers(context, (Numbers) semanticObject); 
				return; 
			case LlmsPackage.ONLY_VAR:
				sequence_OnlyVar(context, (OnlyVar) semanticObject); 
				return; 
			case LlmsPackage.OPERATIONS:
				sequence_Operations(context, (Operations) semanticObject); 
				return; 
			case LlmsPackage.ORS:
				sequence_Ors(context, (Ors) semanticObject); 
				return; 
			case LlmsPackage.PARAMETERS_OUTPTUT:
				sequence_ParametersOutptut(context, (ParametersOutptut) semanticObject); 
				return; 
			case LlmsPackage.PRINTS:
				sequence_Prints(context, (Prints) semanticObject); 
				return; 
			case LlmsPackage.STRINGS:
				sequence_Strings(context, (Strings) semanticObject); 
				return; 
			case LlmsPackage.SUBS:
				sequence_Subs(context, (Subs) semanticObject); 
				return; 
			case LlmsPackage.SUM:
				sequence_Sum(context, (Sum) semanticObject); 
				return; 
			case LlmsPackage.WHILES:
				sequence_Whiles(context, (Whiles) semanticObject); 
				return; 
			case LlmsPackage.FUN_OUTPUTS:
				sequence_Parametersfunc(context, (funOutputs) semanticObject); 
				return; 
			case LlmsPackage.VAR_PARM_ARGS:
				sequence_varParmArgs(context, (varParmArgs) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Ands
	 *     BooleanFunction returns Ands
	 *     Ands returns Ands
	 *
	 * Constraint:
	 *     primary+=Primary+
	 * </pre>
	 */
	protected void sequence_Ands(ISerializationContext context, Ands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns AritmeticOperation
	 *     AritmeticOperation returns AritmeticOperation
	 *
	 * Constraint:
	 *     sum=Sum
	 * </pre>
	 */
	protected void sequence_AritmeticOperation(ISerializationContext context, AritmeticOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.ARITMETIC_OPERATION__SUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.ARITMETIC_OPERATION__SUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAritmeticOperationAccess().getSumSumParserRuleCall_0(), semanticObject.getSum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GenericVariable returns Assignment
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (vars=[varParmArgs|ID] exp=Expression)
	 * </pre>
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.ASSIGNMENT__VARS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.ASSIGNMENT__VARS));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.ASSIGNMENT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.ASSIGNMENT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getVarsVarParmArgsIDTerminalRuleCall_0_0_1(), semanticObject.eGet(LlmsPackage.Literals.ASSIGNMENT__VARS, false));
		feeder.accept(grammarAccess.getAssignmentAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Bodies returns Bodies
	 *
	 * Constraint:
	 *     (var+=GenericVariable | loops+=Loops | cond+=Conditionals)+
	 * </pre>
	 */
	protected void sequence_Bodies(ISerializationContext context, Bodies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParmsPrint returns Booleans
	 *     Sum returns Booleans
	 *     Sum.Sum_1_0 returns Booleans
	 *     Subs returns Booleans
	 *     Subs.Subs_1_0 returns Booleans
	 *     Divition returns Booleans
	 *     Divition.Divition_1_0 returns Booleans
	 *     Multiplication returns Booleans
	 *     Multiplication.Multiplication_1_0 returns Booleans
	 *     Primary returns Booleans
	 *     Datas returns Booleans
	 *     Booleans returns Booleans
	 *
	 * Constraint:
	 *     value?='true'?
	 * </pre>
	 */
	protected void sequence_Booleans(ISerializationContext context, Booleans semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParmsPrint returns CallFunction
	 *     CallFunction returns CallFunction
	 *     Sum returns CallFunction
	 *     Sum.Sum_1_0 returns CallFunction
	 *     Subs returns CallFunction
	 *     Subs.Subs_1_0 returns CallFunction
	 *     Divition returns CallFunction
	 *     Divition.Divition_1_0 returns CallFunction
	 *     Multiplication returns CallFunction
	 *     Multiplication.Multiplication_1_0 returns CallFunction
	 *     Primary returns CallFunction
	 *
	 * Constraint:
	 *     (func=[Functions|ID] (exp+=Expression exp+=Expression*)?)
	 * </pre>
	 */
	protected void sequence_CallFunction(ISerializationContext context, CallFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GenericVariable returns CallVariable
	 *     ParmsPrint returns CallVariable
	 *     CallVariable returns CallVariable
	 *     Sum returns CallVariable
	 *     Sum.Sum_1_0 returns CallVariable
	 *     Subs returns CallVariable
	 *     Subs.Subs_1_0 returns CallVariable
	 *     Divition returns CallVariable
	 *     Divition.Divition_1_0 returns CallVariable
	 *     Multiplication returns CallVariable
	 *     Multiplication.Multiplication_1_0 returns CallVariable
	 *     Primary returns CallVariable
	 *
	 * Constraint:
	 *     vars=[varParmArgs|ID]
	 * </pre>
	 */
	protected void sequence_CallVariable(ISerializationContext context, CallVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.CALL_VARIABLE__VARS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.CALL_VARIABLE__VARS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallVariableAccess().getVarsVarParmArgsIDTerminalRuleCall_0_1(), semanticObject.eGet(LlmsPackage.Literals.CALL_VARIABLE__VARS, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Conditionals returns Conditionals
	 *
	 * Constraint:
	 *     (ifs=Ifs elseif+=ElseIfs* elses=Elses)
	 * </pre>
	 */
	protected void sequence_Conditionals(ISerializationContext context, Conditionals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sum returns Divition
	 *     Sum.Sum_1_0 returns Divition
	 *     Subs returns Divition
	 *     Subs.Subs_1_0 returns Divition
	 *     Divition returns Divition
	 *     Divition.Divition_1_0 returns Divition
	 *
	 * Constraint:
	 *     (left=Divition_Divition_1_0 right=Multiplication)
	 * </pre>
	 */
	protected void sequence_Divition(ISerializationContext context, Divition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.DIVITION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.DIVITION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.DIVITION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.DIVITION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivitionAccess().getDivitionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDivitionAccess().getRightMultiplicationParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParmsPrint returns Doubles
	 *     Sum returns Doubles
	 *     Sum.Sum_1_0 returns Doubles
	 *     Subs returns Doubles
	 *     Subs.Subs_1_0 returns Doubles
	 *     Divition returns Doubles
	 *     Divition.Divition_1_0 returns Doubles
	 *     Multiplication returns Doubles
	 *     Multiplication.Multiplication_1_0 returns Doubles
	 *     Primary returns Doubles
	 *     Datas returns Doubles
	 *     Doubles returns Doubles
	 *
	 * Constraint:
	 *     value=DOUBLE
	 * </pre>
	 */
	protected void sequence_Doubles(ISerializationContext context, Doubles semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.DOUBLES__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.DOUBLES__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoublesAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElseIfs returns ElseIfs
	 *
	 * Constraint:
	 *     (logicParms+=LogicalParams body+=Bodies+)
	 * </pre>
	 */
	protected void sequence_ElseIfs(ISerializationContext context, ElseIfs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Elses returns Elses
	 *
	 * Constraint:
	 *     body+=Bodies+
	 * </pre>
	 */
	protected void sequence_Elses(ISerializationContext context, Elses semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Equal
	 *     LogicalOperation returns Equal
	 *     Equal returns Equal
	 *
	 * Constraint:
	 *     (left=Primary right=Primary)
	 * </pre>
	 */
	protected void sequence_Equal(ISerializationContext context, Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualAccess().getLeftPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getEqualAccess().getRightPrimaryParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalParams returns Equal
	 *
	 * Constraint:
	 *     (left=Primary right=Primary (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*)
	 * </pre>
	 */
	protected void sequence_Equal_LogicalParams(ISerializationContext context, Equal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     op=Operation
	 * </pre>
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.EXPRESSION__OP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getOpOperationParserRuleCall_0(), semanticObject.getOp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Loops returns Fors
	 *     Fors returns Fors
	 *
	 * Constraint:
	 *     (var=GenericVariable number=Numbers body+=Bodies+)
	 * </pre>
	 */
	protected void sequence_Fors(ISerializationContext context, Fors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Functions returns Functions
	 *
	 * Constraint:
	 *     (output=ParametersOutptut name=ID params=Parametersfunc body=Bodies)
	 * </pre>
	 */
	protected void sequence_Functions(ISerializationContext context, Functions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.FUNCTIONS__OUTPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.FUNCTIONS__OUTPUT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.FUNCTIONS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.FUNCTIONS__NAME));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.FUNCTIONS__PARAMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.FUNCTIONS__PARAMS));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.FUNCTIONS__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.FUNCTIONS__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionsAccess().getOutputParametersOutptutParserRuleCall_1_0(), semanticObject.getOutput());
		feeder.accept(grammarAccess.getFunctionsAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionsAccess().getParamsParametersfuncParserRuleCall_4_0(), semanticObject.getParams());
		feeder.accept(grammarAccess.getFunctionsAccess().getBodyBodiesParserRuleCall_7_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns GreaterOrEqual
	 *     LogicalOperation returns GreaterOrEqual
	 *     GreaterOrEqual returns GreaterOrEqual
	 *
	 * Constraint:
	 *     (left=Primary right=Primary)
	 * </pre>
	 */
	protected void sequence_GreaterOrEqual(ISerializationContext context, GreaterOrEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreaterOrEqualAccess().getLeftPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getGreaterOrEqualAccess().getRightPrimaryParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalParams returns GreaterOrEqual
	 *
	 * Constraint:
	 *     (left=Primary right=Primary (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*)
	 * </pre>
	 */
	protected void sequence_GreaterOrEqual_LogicalParams(ISerializationContext context, GreaterOrEqual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns GreaterThan
	 *     LogicalOperation returns GreaterThan
	 *     GreaterThan returns GreaterThan
	 *
	 * Constraint:
	 *     (left=Primary right=Primary)
	 * </pre>
	 */
	protected void sequence_GreaterThan(ISerializationContext context, GreaterThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGreaterThanAccess().getLeftPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getGreaterThanAccess().getRightPrimaryParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalParams returns GreaterThan
	 *
	 * Constraint:
	 *     (left=Primary right=Primary (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*)
	 * </pre>
	 */
	protected void sequence_GreaterThan_LogicalParams(ISerializationContext context, GreaterThan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ifs returns Ifs
	 *
	 * Constraint:
	 *     (lg=LogicalParams body+=Bodies+)
	 * </pre>
	 */
	protected void sequence_Ifs(ISerializationContext context, Ifs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns LessOrEqual
	 *     LogicalOperation returns LessOrEqual
	 *     LessOrEqual returns LessOrEqual
	 *
	 * Constraint:
	 *     (left=Primary right=Primary)
	 * </pre>
	 */
	protected void sequence_LessOrEqual(ISerializationContext context, LessOrEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLessOrEqualAccess().getLeftPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLessOrEqualAccess().getRightPrimaryParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalParams returns LessOrEqual
	 *
	 * Constraint:
	 *     (left=Primary right=Primary (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*)
	 * </pre>
	 */
	protected void sequence_LessOrEqual_LogicalParams(ISerializationContext context, LessOrEqual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns LessThan
	 *     LogicalOperation returns LessThan
	 *     LessThan returns LessThan
	 *
	 * Constraint:
	 *     (left=Primary right=Primary)
	 * </pre>
	 */
	protected void sequence_LessThan(ISerializationContext context, LessThan semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLessThanAccess().getLeftPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLessThanAccess().getRightPrimaryParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalParams returns LessThan
	 *
	 * Constraint:
	 *     (left=Primary right=Primary (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*)
	 * </pre>
	 */
	protected void sequence_LessThan_LogicalParams(ISerializationContext context, LessThan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalParams returns NotEqual
	 *
	 * Constraint:
	 *     (left=Primary right=Primary (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*)
	 * </pre>
	 */
	protected void sequence_LogicalParams_NotEqual(ISerializationContext context, NotEqual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sum returns Multiplication
	 *     Sum.Sum_1_0 returns Multiplication
	 *     Subs returns Multiplication
	 *     Subs.Subs_1_0 returns Multiplication
	 *     Divition returns Multiplication
	 *     Divition.Divition_1_0 returns Multiplication
	 *     Multiplication returns Multiplication
	 *     Multiplication.Multiplication_1_0 returns Multiplication
	 *
	 * Constraint:
	 *     (left=Multiplication_Multiplication_1_0 right=Primary)
	 * </pre>
	 */
	protected void sequence_Multiplication(ISerializationContext context, Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.MULTIPLICATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.MULTIPLICATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.MULTIPLICATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.MULTIPLICATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Nands
	 *     BooleanFunction returns Nands
	 *     Nands returns Nands
	 *
	 * Constraint:
	 *     primary+=Primary+
	 * </pre>
	 */
	protected void sequence_Nands(ISerializationContext context, Nands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Nors
	 *     BooleanFunction returns Nors
	 *     Nors returns Nors
	 *
	 * Constraint:
	 *     primary+=Primary+
	 * </pre>
	 */
	protected void sequence_Nors(ISerializationContext context, Nors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns NotEqual
	 *     LogicalOperation returns NotEqual
	 *     NotEqual returns NotEqual
	 *
	 * Constraint:
	 *     (left=Primary right=Primary)
	 * </pre>
	 */
	protected void sequence_NotEqual(ISerializationContext context, NotEqual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.LOGICAL_OPERATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNotEqualAccess().getLeftPrimaryParserRuleCall_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getNotEqualAccess().getRightPrimaryParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Nots
	 *     BooleanFunction returns Nots
	 *     Nots returns Nots
	 *
	 * Constraint:
	 *     primary+=Primary+
	 * </pre>
	 */
	protected void sequence_Nots(ISerializationContext context, Nots semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParmsPrint returns Numbers
	 *     Sum returns Numbers
	 *     Sum.Sum_1_0 returns Numbers
	 *     Subs returns Numbers
	 *     Subs.Subs_1_0 returns Numbers
	 *     Divition returns Numbers
	 *     Divition.Divition_1_0 returns Numbers
	 *     Multiplication returns Numbers
	 *     Multiplication.Multiplication_1_0 returns Numbers
	 *     Primary returns Numbers
	 *     Datas returns Numbers
	 *     Numbers returns Numbers
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_Numbers(ISerializationContext context, Numbers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.NUMBERS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.NUMBERS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumbersAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GenericVariable returns OnlyVar
	 *     OnlyVar returns OnlyVar
	 *
	 * Constraint:
	 *     (name=ID dataType=DataTypes)
	 * </pre>
	 */
	protected void sequence_OnlyVar(ISerializationContext context, OnlyVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.ONLY_VAR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.ONLY_VAR__NAME));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.ONLY_VAR__DATA_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.ONLY_VAR__DATA_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnlyVarAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOnlyVarAccess().getDataTypeDataTypesParserRuleCall_2_0(), semanticObject.getDataType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operations returns Operations
	 *
	 * Constraint:
	 *     (name=ID (func+=Functions | vars+=varParmArgs | conditional+=Conditionals | loops+=Loops | print+=Prints)*)
	 * </pre>
	 */
	protected void sequence_Operations(ISerializationContext context, Operations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operation returns Ors
	 *     BooleanFunction returns Ors
	 *     Ors returns Ors
	 *
	 * Constraint:
	 *     primary+=Primary+
	 * </pre>
	 */
	protected void sequence_Ors(ISerializationContext context, Ors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParametersOutptut returns ParametersOutptut
	 *
	 * Constraint:
	 *     (param=varParmArgs | (params+=varParmArgs params+=varParmArgs*))?
	 * </pre>
	 */
	protected void sequence_ParametersOutptut(ISerializationContext context, ParametersOutptut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parametersfunc returns funOutputs
	 *
	 * Constraint:
	 *     (params+=Expression params+=Expression*)?
	 * </pre>
	 */
	protected void sequence_Parametersfunc(ISerializationContext context, funOutputs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Prints returns Prints
	 *
	 * Constraint:
	 *     (print+=ParmsPrint print+=ParmsPrint*)?
	 * </pre>
	 */
	protected void sequence_Prints(ISerializationContext context, Prints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParmsPrint returns Strings
	 *     Sum returns Strings
	 *     Sum.Sum_1_0 returns Strings
	 *     Subs returns Strings
	 *     Subs.Subs_1_0 returns Strings
	 *     Divition returns Strings
	 *     Divition.Divition_1_0 returns Strings
	 *     Multiplication returns Strings
	 *     Multiplication.Multiplication_1_0 returns Strings
	 *     Primary returns Strings
	 *     Datas returns Strings
	 *     Strings returns Strings
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Strings(ISerializationContext context, Strings semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.STRINGS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.STRINGS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringsAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sum returns Subs
	 *     Sum.Sum_1_0 returns Subs
	 *     Subs returns Subs
	 *     Subs.Subs_1_0 returns Subs
	 *
	 * Constraint:
	 *     (left=Subs_Subs_1_0 right=Divition)
	 * </pre>
	 */
	protected void sequence_Subs(ISerializationContext context, Subs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.SUBS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.SUBS__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.SUBS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.SUBS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubsAccess().getSubsLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSubsAccess().getRightDivitionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sum returns Sum
	 *     Sum.Sum_1_0 returns Sum
	 *
	 * Constraint:
	 *     (left=Sum_Sum_1_0 right=Subs)
	 * </pre>
	 */
	protected void sequence_Sum(ISerializationContext context, Sum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.SUM__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.SUM__LEFT));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.SUM__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.SUM__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSumAccess().getSumLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSumAccess().getRightSubsParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Loops returns Whiles
	 *     Whiles returns Whiles
	 *
	 * Constraint:
	 *     (logical=LogicalParams bodie+=Bodies+)
	 * </pre>
	 */
	protected void sequence_Whiles(ISerializationContext context, Whiles semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     varParmArgs returns varParmArgs
	 *     GenericVariable returns varParmArgs
	 *     Sum returns varParmArgs
	 *     Sum.Sum_1_0 returns varParmArgs
	 *     Subs returns varParmArgs
	 *     Subs.Subs_1_0 returns varParmArgs
	 *     Divition returns varParmArgs
	 *     Divition.Divition_1_0 returns varParmArgs
	 *     Multiplication returns varParmArgs
	 *     Multiplication.Multiplication_1_0 returns varParmArgs
	 *     Primary returns varParmArgs
	 *
	 * Constraint:
	 *     (name=ID dataType=DataTypes exp=Expression)
	 * </pre>
	 */
	protected void sequence_varParmArgs(ISerializationContext context, varParmArgs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.VAR_PARM_ARGS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.VAR_PARM_ARGS__NAME));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.VAR_PARM_ARGS__DATA_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.VAR_PARM_ARGS__DATA_TYPE));
			if (transientValues.isValueTransient(semanticObject, LlmsPackage.Literals.VAR_PARM_ARGS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LlmsPackage.Literals.VAR_PARM_ARGS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarParmArgsAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVarParmArgsAccess().getDataTypeDataTypesParserRuleCall_2_0(), semanticObject.getDataType());
		feeder.accept(grammarAccess.getVarParmArgsAccess().getExpExpressionParserRuleCall_3_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
}
