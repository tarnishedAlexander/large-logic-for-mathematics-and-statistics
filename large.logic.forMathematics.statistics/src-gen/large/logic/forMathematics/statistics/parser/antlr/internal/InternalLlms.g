/*
 * generated by Xtext 2.35.0
 */
grammar InternalLlms;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package large.logic.forMathematics.statistics.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package large.logic.forMathematics.statistics.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import large.logic.forMathematics.statistics.services.LlmsGrammarAccess;

}

@parser::members {

 	private LlmsGrammarAccess grammarAccess;

    public InternalLlmsParser(TokenStream input, LlmsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Operations";
   	}

   	@Override
   	protected LlmsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleOperations
entryRuleOperations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationsRule()); }
	iv_ruleOperations=ruleOperations
	{ $current=$iv_ruleOperations.current; }
	EOF;

// Rule Operations
ruleOperations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOperationsAccess().getOperationsAction_0(),
					$current);
			}
		)
		otherlv_1='Class'
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationsAccess().getClassKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationsAccess().getFuncFunctionsParserRuleCall_3_0_0());
					}
					lv_func_3_0=ruleFunctions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationsRule());
						}
						add(
							$current,
							"func",
							lv_func_3_0,
							"large.logic.forMathematics.statistics.Llms.Functions");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationsAccess().getVarVariablesParserRuleCall_3_1_0());
					}
					lv_var_4_0=ruleVariables
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationsRule());
						}
						add(
							$current,
							"var",
							lv_var_4_0,
							"large.logic.forMathematics.statistics.Llms.Variables");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationsAccess().getConditionalConditionalsParserRuleCall_3_2_0());
					}
					lv_conditional_5_0=ruleConditionals
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationsRule());
						}
						add(
							$current,
							"conditional",
							lv_conditional_5_0,
							"large.logic.forMathematics.statistics.Llms.Conditionals");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationsAccess().getLoopsLoopsParserRuleCall_3_3_0());
					}
					lv_loops_6_0=ruleLoops
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationsRule());
						}
						add(
							$current,
							"loops",
							lv_loops_6_0,
							"large.logic.forMathematics.statistics.Llms.Loops");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationsAccess().getPrintPrintsParserRuleCall_3_4_0());
					}
					lv_print_7_0=rulePrints
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationsRule());
						}
						add(
							$current,
							"print",
							lv_print_7_0,
							"large.logic.forMathematics.statistics.Llms.Prints");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getOperationsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePrints
entryRulePrints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintsRule()); }
	iv_rulePrints=rulePrints
	{ $current=$iv_rulePrints.current; }
	EOF;

// Rule Prints
rulePrints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintsAccess().getPrintsAction_0(),
					$current);
			}
		)
		otherlv_1='print'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintsAccess().getPrintKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintsAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPrintsAccess().getPrintParmsPrintParserRuleCall_3_0_0());
					}
					lv_print_3_0=ruleParmsPrint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrintsRule());
						}
						add(
							$current,
							"print",
							lv_print_3_0,
							"large.logic.forMathematics.statistics.Llms.ParmsPrint");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getPrintsAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPrintsAccess().getPrintParmsPrintParserRuleCall_3_1_1_0());
						}
						lv_print_5_0=ruleParmsPrint
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrintsRule());
							}
							add(
								$current,
								"print",
								lv_print_5_0,
								"large.logic.forMathematics.statistics.Llms.ParmsPrint");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getPrintsAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleParmsPrint
entryRuleParmsPrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParmsPrintRule()); }
	iv_ruleParmsPrint=ruleParmsPrint
	{ $current=$iv_ruleParmsPrint.current; }
	EOF;

// Rule ParmsPrint
ruleParmsPrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParmsPrintAccess().getDataParserRuleCall_0());
		}
		this_Data_0=ruleData
		{
			$current = $this_Data_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParmsPrintAccess().getCallVariableParserRuleCall_1());
		}
		this_CallVariable_1=ruleCallVariable
		{
			$current = $this_CallVariable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParmsPrintAccess().getCallFunctionParserRuleCall_2());
		}
		this_callFunction_2=rulecallFunction
		{
			$current = $this_callFunction_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNames
entryRuleNames returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamesRule()); }
	iv_ruleNames=ruleNames
	{ $current=$iv_ruleNames.current; }
	EOF;

// Rule Names
ruleNames returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getNamesAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNamesRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunctions
entryRuleFunctions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionsRule()); }
	iv_ruleFunctions=ruleFunctions
	{ $current=$iv_ruleFunctions.current; }
	EOF;

// Rule Functions
ruleFunctions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionsAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionsAccess().getOutputParametersOutptutParserRuleCall_1_0());
				}
				lv_output_1_0=ruleParametersOutptut
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionsRule());
					}
					set(
						$current,
						"output",
						lv_output_1_0,
						"large.logic.forMathematics.statistics.Llms.ParametersOutptut");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionsAccess().getLessThanSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionsAccess().getNameNamesParserRuleCall_3_0());
				}
				lv_name_3_0=ruleNames
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionsRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"large.logic.forMathematics.statistics.Llms.Names");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionsAccess().getParamsParametersfuncParserRuleCall_4_0());
				}
				lv_params_4_0=ruleParametersfunc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionsRule());
					}
					set(
						$current,
						"params",
						lv_params_4_0,
						"large.logic.forMathematics.statistics.Llms.Parametersfunc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='=>'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionsAccess().getEqualsSignGreaterThanSignKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionsAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionsAccess().getBodyBodiesParserRuleCall_7_0());
				}
				lv_body_7_0=ruleBodies
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionsRule());
					}
					set(
						$current,
						"body",
						lv_body_7_0,
						"large.logic.forMathematics.statistics.Llms.Bodies");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getFunctionsAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleBodies
entryRuleBodies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodiesRule()); }
	iv_ruleBodies=ruleBodies
	{ $current=$iv_ruleBodies.current; }
	EOF;

// Rule Bodies
ruleBodies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBodiesAccess().getBodiesAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBodiesAccess().getVarVariablesParserRuleCall_1_0());
				}
				lv_var_1_0=ruleVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBodiesRule());
					}
					add(
						$current,
						"var",
						lv_var_1_0,
						"large.logic.forMathematics.statistics.Llms.Variables");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getBodiesAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleLoops
entryRuleLoops returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopsRule()); }
	iv_ruleLoops=ruleLoops
	{ $current=$iv_ruleLoops.current; }
	EOF;

// Rule Loops
ruleLoops returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopsAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopsAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getLoopsAccess().getVariablesParserRuleCall_2_0());
			}
			this_Variables_2=ruleVariables
			{
				$current = $this_Variables_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getLoopsAccess().getNumbersParserRuleCall_2_1());
			}
			this_Numbers_3=ruleNumbers
			{
				$current = $this_Numbers_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getLoopsAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopsAccess().getNumberNumbersParserRuleCall_4_0());
				}
				lv_number_5_0=ruleNumbers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopsRule());
					}
					set(
						$current,
						"number",
						lv_number_5_0,
						"large.logic.forMathematics.statistics.Llms.Numbers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopsAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7='=>'
		{
			newLeafNode(otherlv_7, grammarAccess.getLoopsAccess().getEqualsSignGreaterThanSignKeyword_6());
		}
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getLoopsAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopsAccess().getBodyBodiesParserRuleCall_8_0());
				}
				lv_body_9_0=ruleBodies
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopsRule());
					}
					add(
						$current,
						"body",
						lv_body_9_0,
						"large.logic.forMathematics.statistics.Llms.Bodies");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getLoopsAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleConditionals
entryRuleConditionals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalsRule()); }
	iv_ruleConditionals=ruleConditionals
	{ $current=$iv_ruleConditionals.current; }
	EOF;

// Rule Conditionals
ruleConditionals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalsAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalsAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getConditionalsAccess().getLogicalParamsParserRuleCall_2());
		}
		this_LogicalParams_2=ruleLogicalParams
		{
			$current = $this_LogicalParams_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionalsAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='=>'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalsAccess().getEqualsSignGreaterThanSignKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalsAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_6_0());
				}
				lv_body_6_0=ruleBodies
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalsRule());
					}
					add(
						$current,
						"body",
						lv_body_6_0,
						"large.logic.forMathematics.statistics.Llms.Bodies");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_7());
		}
		(
			otherlv_8='else-if'
			{
				newLeafNode(otherlv_8, grammarAccess.getConditionalsAccess().getElseIfKeyword_8_0());
			}
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getConditionalsAccess().getLeftParenthesisKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalsAccess().getLogicParmsLogicalParamsParserRuleCall_8_2_0());
					}
					lv_logicParms_10_0=ruleLogicalParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalsRule());
						}
						add(
							$current,
							"logicParms",
							lv_logicParms_10_0,
							"large.logic.forMathematics.statistics.Llms.LogicalParams");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getConditionalsAccess().getRightParenthesisKeyword_8_3());
			}
			otherlv_12='=>'
			{
				newLeafNode(otherlv_12, grammarAccess.getConditionalsAccess().getEqualsSignGreaterThanSignKeyword_8_4());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getConditionalsAccess().getLeftCurlyBracketKeyword_8_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_8_6_0());
					}
					lv_body_14_0=ruleBodies
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalsRule());
						}
						add(
							$current,
							"body",
							lv_body_14_0,
							"large.logic.forMathematics.statistics.Llms.Bodies");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_8_7());
			}
		)*
		otherlv_16='else{'
		{
			newLeafNode(otherlv_16, grammarAccess.getConditionalsAccess().getElseKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalsAccess().getBodyBodiesParserRuleCall_10_0());
				}
				lv_body_17_0=ruleBodies
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalsRule());
					}
					add(
						$current,
						"body",
						lv_body_17_0,
						"large.logic.forMathematics.statistics.Llms.Bodies");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_18='}'
		{
			newLeafNode(otherlv_18, grammarAccess.getConditionalsAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleLogicalParams
entryRuleLogicalParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalParamsRule()); }
	iv_ruleLogicalParams=ruleLogicalParams
	{ $current=$iv_ruleLogicalParams.current; }
	EOF;

// Rule LogicalParams
ruleLogicalParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalParamsAccess().getLogicalOperationParserRuleCall_0());
		}
		this_LogicalOperation_0=ruleLogicalOperation
		{
			$current = $this_LogicalOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalParamsAccess().getBoolFuncBooleanFunctionParserRuleCall_1_0_0());
					}
					lv_boolFunc_1_0=ruleBooleanFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalParamsRule());
						}
						add(
							$current,
							"boolFunc",
							lv_boolFunc_1_0,
							"large.logic.forMathematics.statistics.Llms.BooleanFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalParamsAccess().getLgicOpLogicalOperationParserRuleCall_1_1_0());
					}
					lv_lgicOp_2_0=ruleLogicalOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalParamsRule());
						}
						add(
							$current,
							"lgicOp",
							lv_lgicOp_2_0,
							"large.logic.forMathematics.statistics.Llms.LogicalOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParametersOutptut
entryRuleParametersOutptut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersOutptutRule()); }
	iv_ruleParametersOutptut=ruleParametersOutptut
	{ $current=$iv_ruleParametersOutptut.current; }
	EOF;

// Rule ParametersOutptut
ruleParametersOutptut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersOutptutAccess().getParamVarParmArgsParserRuleCall_0_0());
				}
				lv_param_0_0=rulevarParmArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersOutptutRule());
					}
					set(
						$current,
						"param",
						lv_param_0_0,
						"large.logic.forMathematics.statistics.Llms.varParmArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getParametersOutptutAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParametersOutptutAccess().getParametersOutptutAction_1_1(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getParametersOutptutAccess().getParamsVarParmArgsParserRuleCall_1_2_0_0());
						}
						lv_params_3_0=rulevarParmArgs
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParametersOutptutRule());
							}
							add(
								$current,
								"params",
								lv_params_3_0,
								"large.logic.forMathematics.statistics.Llms.varParmArgs");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getParametersOutptutAccess().getCommaKeyword_1_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getParametersOutptutAccess().getParamsVarParmArgsParserRuleCall_1_2_1_1_0());
							}
							lv_params_5_0=rulevarParmArgs
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParametersOutptutRule());
								}
								add(
									$current,
									"params",
									lv_params_5_0,
									"large.logic.forMathematics.statistics.Llms.varParmArgs");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getParametersOutptutAccess().getRightSquareBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleParametersfunc
entryRuleParametersfunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersfuncRule()); }
	iv_ruleParametersfunc=ruleParametersfunc
	{ $current=$iv_ruleParametersfunc.current; }
	EOF;

// Rule Parametersfunc
ruleParametersfunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParametersfuncAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParametersfuncAccess().getFunOutputsAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParametersfuncAccess().getParamsExpressionParserRuleCall_2_0_0());
					}
					lv_params_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametersfuncRule());
						}
						add(
							$current,
							"params",
							lv_params_2_0,
							"large.logic.forMathematics.statistics.Llms.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getParametersfuncAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParametersfuncAccess().getParamsExpressionParserRuleCall_2_1_1_0());
						}
						lv_params_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParametersfuncRule());
							}
							add(
								$current,
								"params",
								lv_params_4_0,
								"large.logic.forMathematics.statistics.Llms.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParametersfuncAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getOpOperationParserRuleCall_0());
			}
			lv_op_0_0=ruleOperation
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionRule());
				}
				set(
					$current,
					"op",
					lv_op_0_0,
					"large.logic.forMathematics.statistics.Llms.Operation");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getAritmeticOperationParserRuleCall_0());
		}
		this_AritmeticOperation_0=ruleAritmeticOperation
		{
			$current = $this_AritmeticOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getLogicalOperationParserRuleCall_1());
		}
		this_LogicalOperation_1=ruleLogicalOperation
		{
			$current = $this_LogicalOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getBooleanFunctionParserRuleCall_2());
		}
		this_BooleanFunction_2=ruleBooleanFunction
		{
			$current = $this_BooleanFunction_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLogicalOperation
entryRuleLogicalOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperationRule()); }
	iv_ruleLogicalOperation=ruleLogicalOperation
	{ $current=$iv_ruleLogicalOperation.current; }
	EOF;

// Rule LogicalOperation
ruleLogicalOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalOperationAccess().getLessThanParserRuleCall_0());
		}
		this_LessThan_0=ruleLessThan
		{
			$current = $this_LessThan_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalOperationAccess().getGreaterThanParserRuleCall_1());
		}
		this_GreaterThan_1=ruleGreaterThan
		{
			$current = $this_GreaterThan_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalOperationAccess().getEqualParserRuleCall_2());
		}
		this_Equal_2=ruleEqual
		{
			$current = $this_Equal_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalOperationAccess().getNotEqualParserRuleCall_3());
		}
		this_NotEqual_3=ruleNotEqual
		{
			$current = $this_NotEqual_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalOperationAccess().getLessOrEqualParserRuleCall_4());
		}
		this_LessOrEqual_4=ruleLessOrEqual
		{
			$current = $this_LessOrEqual_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicalOperationAccess().getGreaterOrEqualParserRuleCall_5());
		}
		this_GreaterOrEqual_5=ruleGreaterOrEqual
		{
			$current = $this_GreaterOrEqual_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLessThan
entryRuleLessThan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLessThanRule()); }
	iv_ruleLessThan=ruleLessThan
	{ $current=$iv_ruleLessThan.current; }
	EOF;

// Rule LessThan
ruleLessThan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getLessThanAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLessThanAccess().getLeftPrimaryParserRuleCall_1_0());
				}
				lv_left_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessThanRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLessThanAccess().getRightPrimaryParserRuleCall_2_0());
				}
				lv_right_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessThanRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGreaterThan
entryRuleGreaterThan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterThanRule()); }
	iv_ruleGreaterThan=ruleGreaterThan
	{ $current=$iv_ruleGreaterThan.current; }
	EOF;

// Rule GreaterThan
ruleGreaterThan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='>'
		{
			newLeafNode(otherlv_0, grammarAccess.getGreaterThanAccess().getGreaterThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterThanAccess().getLeftPrimaryParserRuleCall_1_0());
				}
				lv_left_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterThanRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterThanAccess().getRightPrimaryParserRuleCall_2_0());
				}
				lv_right_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterThanRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='='
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getEqualsSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getLeftPrimaryParserRuleCall_1_0());
				}
				lv_left_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getRightPrimaryParserRuleCall_2_0());
				}
				lv_right_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNotEqual
entryRuleNotEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotEqualRule()); }
	iv_ruleNotEqual=ruleNotEqual
	{ $current=$iv_ruleNotEqual.current; }
	EOF;

// Rule NotEqual
ruleNotEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!='
		{
			newLeafNode(otherlv_0, grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotEqualAccess().getLeftPrimaryParserRuleCall_1_0());
				}
				lv_left_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNotEqualAccess().getRightPrimaryParserRuleCall_2_0());
				}
				lv_right_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLessOrEqual
entryRuleLessOrEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLessOrEqualRule()); }
	iv_ruleLessOrEqual=ruleLessOrEqual
	{ $current=$iv_ruleLessOrEqual.current; }
	EOF;

// Rule LessOrEqual
ruleLessOrEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<='
		{
			newLeafNode(otherlv_0, grammarAccess.getLessOrEqualAccess().getLessThanSignEqualsSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLessOrEqualAccess().getLeftPrimaryParserRuleCall_1_0());
				}
				lv_left_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessOrEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLessOrEqualAccess().getRightPrimaryParserRuleCall_2_0());
				}
				lv_right_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLessOrEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGreaterOrEqual
entryRuleGreaterOrEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterOrEqualRule()); }
	iv_ruleGreaterOrEqual=ruleGreaterOrEqual
	{ $current=$iv_ruleGreaterOrEqual.current; }
	EOF;

// Rule GreaterOrEqual
ruleGreaterOrEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='>='
		{
			newLeafNode(otherlv_0, grammarAccess.getGreaterOrEqualAccess().getGreaterThanSignEqualsSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterOrEqualAccess().getLeftPrimaryParserRuleCall_1_0());
				}
				lv_left_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterOrEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterOrEqualAccess().getRightPrimaryParserRuleCall_2_0());
				}
				lv_right_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterOrEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanFunction
entryRuleBooleanFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanFunctionRule()); }
	iv_ruleBooleanFunction=ruleBooleanFunction
	{ $current=$iv_ruleBooleanFunction.current; }
	EOF;

// Rule BooleanFunction
ruleBooleanFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanFunctionAccess().getAndsParserRuleCall_0());
		}
		this_Ands_0=ruleAnds
		{
			$current = $this_Ands_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanFunctionAccess().getOrsParserRuleCall_1());
		}
		this_Ors_1=ruleOrs
		{
			$current = $this_Ors_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanFunctionAccess().getNotsParserRuleCall_2());
		}
		this_Nots_2=ruleNots
		{
			$current = $this_Nots_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanFunctionAccess().getNorsParserRuleCall_3());
		}
		this_Nors_3=ruleNors
		{
			$current = $this_Nors_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanFunctionAccess().getNandsParserRuleCall_4());
		}
		this_Nands_4=ruleNands
		{
			$current = $this_Nands_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnds
entryRuleAnds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndsRule()); }
	iv_ruleAnds=ruleAnds
	{ $current=$iv_ruleAnds.current; }
	EOF;

// Rule Ands
ruleAnds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&&'
		{
			newLeafNode(otherlv_0, grammarAccess.getAndsAccess().getAmpersandAmpersandKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndsAccess().getPrimaryPrimaryParserRuleCall_1_0());
				}
				lv_primary_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndsRule());
					}
					add(
						$current,
						"primary",
						lv_primary_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleOrs
entryRuleOrs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrsRule()); }
	iv_ruleOrs=ruleOrs
	{ $current=$iv_ruleOrs.current; }
	EOF;

// Rule Ors
ruleOrs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='||'
		{
			newLeafNode(otherlv_0, grammarAccess.getOrsAccess().getVerticalLineVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrsAccess().getPrimaryPrimaryParserRuleCall_1_0());
				}
				lv_primary_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrsRule());
					}
					add(
						$current,
						"primary",
						lv_primary_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNots
entryRuleNots returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotsRule()); }
	iv_ruleNots=ruleNots
	{ $current=$iv_ruleNots.current; }
	EOF;

// Rule Nots
ruleNots returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotsAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotsAccess().getPrimaryPrimaryParserRuleCall_1_0());
				}
				lv_primary_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotsRule());
					}
					add(
						$current,
						"primary",
						lv_primary_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNors
entryRuleNors returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNorsRule()); }
	iv_ruleNors=ruleNors
	{ $current=$iv_ruleNors.current; }
	EOF;

// Rule Nors
ruleNors returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='nor'
		{
			newLeafNode(otherlv_0, grammarAccess.getNorsAccess().getNorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNorsAccess().getPrimaryPrimaryParserRuleCall_1_0());
				}
				lv_primary_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNorsRule());
					}
					add(
						$current,
						"primary",
						lv_primary_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNands
entryRuleNands returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNandsRule()); }
	iv_ruleNands=ruleNands
	{ $current=$iv_ruleNands.current; }
	EOF;

// Rule Nands
ruleNands returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='nand'
		{
			newLeafNode(otherlv_0, grammarAccess.getNandsAccess().getNandKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNandsAccess().getPrimaryPrimaryParserRuleCall_1_0());
				}
				lv_primary_1_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNandsRule());
					}
					add(
						$current,
						"primary",
						lv_primary_1_0,
						"large.logic.forMathematics.statistics.Llms.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleAritmeticOperation
entryRuleAritmeticOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAritmeticOperationRule()); }
	iv_ruleAritmeticOperation=ruleAritmeticOperation
	{ $current=$iv_ruleAritmeticOperation.current; }
	EOF;

// Rule AritmeticOperation
ruleAritmeticOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAritmeticOperationAccess().getSumSumParserRuleCall_0());
			}
			lv_sum_0_0=ruleSum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAritmeticOperationRule());
				}
				set(
					$current,
					"sum",
					lv_sum_0_0,
					"large.logic.forMathematics.statistics.Llms.Sum");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSumAccess().getSubsParserRuleCall_0());
		}
		this_Subs_0=ruleSubs
		{
			$current = $this_Subs_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSumAccess().getSumLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getSumAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSumAccess().getRightSubsParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSubs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"large.logic.forMathematics.statistics.Llms.Subs");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSubs
entryRuleSubs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubsRule()); }
	iv_ruleSubs=ruleSubs
	{ $current=$iv_ruleSubs.current; }
	EOF;

// Rule Subs
ruleSubs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubsAccess().getDivitionParserRuleCall_0());
		}
		this_Divition_0=ruleDivition
		{
			$current = $this_Divition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSubsAccess().getSubsLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='-'
			{
				newLeafNode(otherlv_2, grammarAccess.getSubsAccess().getHyphenMinusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubsAccess().getRightDivitionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDivition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubsRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"large.logic.forMathematics.statistics.Llms.Divition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDivition
entryRuleDivition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivitionRule()); }
	iv_ruleDivition=ruleDivition
	{ $current=$iv_ruleDivition.current; }
	EOF;

// Rule Divition
ruleDivition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDivitionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDivitionAccess().getDivitionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='/'
			{
				newLeafNode(otherlv_2, grammarAccess.getDivitionAccess().getSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDivitionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDivitionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"large.logic.forMathematics.statistics.Llms.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"large.logic.forMathematics.statistics.Llms.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getVarParmArgsParserRuleCall_0());
		}
		this_varParmArgs_0=rulevarParmArgs
		{
			$current = $this_varParmArgs_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getVarVariablesCrossReference_1_0());
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCallFunctionParserRuleCall_2());
		}
		this_callFunction_2=rulecallFunction
		{
			$current = $this_callFunction_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getDataParserRuleCall_3());
		}
		this_Data_3=ruleData
		{
			$current = $this_Data_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulecallFunction
entryRulecallFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallFunctionRule()); }
	iv_rulecallFunction=rulecallFunction
	{ $current=$iv_rulecallFunction.current; }
	EOF;

// Rule callFunction
rulecallFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallFunctionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCallFunctionAccess().getFuncFunctionsCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCallFunctionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCallFunctionAccess().getExpExpressionParserRuleCall_2_0_0());
					}
					lv_exp_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCallFunctionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"large.logic.forMathematics.statistics.Llms.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getCallFunctionAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCallFunctionAccess().getExpExpressionParserRuleCall_2_1_1_0());
						}
						lv_exp_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCallFunctionRule());
							}
							add(
								$current,
								"exp",
								lv_exp_4_0,
								"large.logic.forMathematics.statistics.Llms.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCallFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleVariables
entryRuleVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariablesRule()); }
	iv_ruleVariables=ruleVariables
	{ $current=$iv_ruleVariables.current; }
	EOF;

// Rule Variables
ruleVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariablesAccess().getVarParmArgsParserRuleCall_0_0());
			}
			this_varParmArgs_0=rulevarParmArgs
			{
				$current = $this_varParmArgs_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getVariablesAccess().getCallVariableParserRuleCall_0_1());
			}
			this_CallVariable_1=ruleCallVariable
			{
				$current = $this_CallVariable_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariablesAccess().getLessThanSignEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariablesAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariablesRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"large.logic.forMathematics.statistics.Llms.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariablesAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleCallVariable
entryRuleCallVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallVariableRule()); }
	iv_ruleCallVariable=ruleCallVariable
	{ $current=$iv_ruleCallVariable.current; }
	EOF;

// Rule CallVariable
ruleCallVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCallVariableRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getCallVariableAccess().getVarsVariablesCrossReference_0());
			}
		)
	)
;

// Entry rule entryRulevarParmArgs
entryRulevarParmArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarParmArgsRule()); }
	iv_rulevarParmArgs=rulevarParmArgs
	{ $current=$iv_rulevarParmArgs.current; }
	EOF;

// Rule varParmArgs
rulevarParmArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVarParmArgsAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarParmArgsRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarParmArgsAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarParmArgsAccess().getDataTypeDataTypesParserRuleCall_2_0());
				}
				lv_dataType_2_0=ruleDataTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarParmArgsRule());
					}
					set(
						$current,
						"dataType",
						lv_dataType_2_0,
						"large.logic.forMathematics.statistics.Llms.DataTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDataTypes
entryRuleDataTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataTypesRule()); }
	iv_ruleDataTypes=ruleDataTypes
	{ $current=$iv_ruleDataTypes.current.getText(); }
	EOF;

// Rule DataTypes
ruleDataTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypesAccess().getIntKeyword_0());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypesAccess().getBoolKeyword_1());
		}
		    |
		kw='doubles'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypesAccess().getDoublesKeyword_2());
		}
		    |
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataTypesAccess().getStringKeyword_3());
		}
	)
;

// Entry rule entryRuleData
entryRuleData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	iv_ruleData=ruleData
	{ $current=$iv_ruleData.current; }
	EOF;

// Rule Data
ruleData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataAccess().getNumbersParserRuleCall_0());
		}
		this_Numbers_0=ruleNumbers
		{
			$current = $this_Numbers_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataAccess().getStringsParserRuleCall_1());
		}
		this_Strings_1=ruleStrings
		{
			$current = $this_Strings_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataAccess().getBooleansParserRuleCall_2());
		}
		this_Booleans_2=ruleBooleans
		{
			$current = $this_Booleans_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataAccess().getDoublesParserRuleCall_3());
		}
		this_Doubles_3=ruleDoubles
		{
			$current = $this_Doubles_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumbers
entryRuleNumbers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumbersRule()); }
	iv_ruleNumbers=ruleNumbers
	{ $current=$iv_ruleNumbers.current; }
	EOF;

// Rule Numbers
ruleNumbers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumbersAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumbersRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStrings
entryRuleStrings returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringsRule()); }
	iv_ruleStrings=ruleStrings
	{ $current=$iv_ruleStrings.current; }
	EOF;

// Rule Strings
ruleStrings returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringsAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringsRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleBooleans
entryRuleBooleans returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleansRule()); }
	iv_ruleBooleans=ruleBooleans
	{ $current=$iv_ruleBooleans.current; }
	EOF;

// Rule Booleans
ruleBooleans returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0='true'
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleansAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleansRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0 != null, "true");
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBooleansAccess().getBooleansAction_1_0(),
						$current);
				}
			)
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleansAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleDoubles
entryRuleDoubles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoublesRule()); }
	iv_ruleDoubles=ruleDoubles
	{ $current=$iv_ruleDoubles.current; }
	EOF;

// Rule Doubles
ruleDoubles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DOUBLE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDoublesAccess().getValueDOUBLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDoublesRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"large.logic.forMathematics.statistics.Llms.DOUBLE");
			}
		)
	)
;

RULE_DOUBLE : ('0'..'9')+ '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
