/**
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.llms.util;

import large.logic.forMathematics.statistics.llms.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see large.logic.forMathematics.statistics.llms.LlmsPackage
 * @generated
 */
public class LlmsSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LlmsPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LlmsSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = LlmsPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case LlmsPackage.OPERATIONS:
      {
        Operations operations = (Operations)theEObject;
        T result = caseOperations(operations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.FUNCTIONS:
      {
        Functions functions = (Functions)theEObject;
        T result = caseFunctions(functions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.PARAMETERS_OUTPTUT:
      {
        ParametersOutptut parametersOutptut = (ParametersOutptut)theEObject;
        T result = caseParametersOutptut(parametersOutptut);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.PARAMETERSFUNC:
      {
        Parametersfunc parametersfunc = (Parametersfunc)theEObject;
        T result = caseParametersfunc(parametersfunc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.BODIES:
      {
        Bodies bodies = (Bodies)theEObject;
        T result = caseBodies(bodies);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.VAR_PARM_ARGS:
      {
        varParmArgs varParmArgs = (varParmArgs)theEObject;
        T result = casevarParmArgs(varParmArgs);
        if (result == null) result = caseGenericVariable(varParmArgs);
        if (result == null) result = casePrimary(varParmArgs);
        if (result == null) result = caseExpressions(varParmArgs);
        if (result == null) result = caseExpression(varParmArgs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.GENERIC_VARIABLE:
      {
        GenericVariable genericVariable = (GenericVariable)theEObject;
        T result = caseGenericVariable(genericVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.LOOPS:
      {
        Loops loops = (Loops)theEObject;
        T result = caseLoops(loops);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.FORS:
      {
        Fors fors = (Fors)theEObject;
        T result = caseFors(fors);
        if (result == null) result = caseLoops(fors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.WHILES:
      {
        Whiles whiles = (Whiles)theEObject;
        T result = caseWhiles(whiles);
        if (result == null) result = caseLoops(whiles);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.CONDITIONALS:
      {
        Conditionals conditionals = (Conditionals)theEObject;
        T result = caseConditionals(conditionals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.IFS:
      {
        Ifs ifs = (Ifs)theEObject;
        T result = caseIfs(ifs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ELSE_IFS:
      {
        ElseIfs elseIfs = (ElseIfs)theEObject;
        T result = caseElseIfs(elseIfs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ELSES:
      {
        Elses elses = (Elses)theEObject;
        T result = caseElses(elses);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.PARMS_PRINT:
      {
        ParmsPrint parmsPrint = (ParmsPrint)theEObject;
        T result = caseParmsPrint(parmsPrint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.CALL_FUNCTION:
      {
        CallFunction callFunction = (CallFunction)theEObject;
        T result = caseCallFunction(callFunction);
        if (result == null) result = caseParmsPrint(callFunction);
        if (result == null) result = casePrimary(callFunction);
        if (result == null) result = caseExpressions(callFunction);
        if (result == null) result = caseExpression(callFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.CALL_VARIABLE:
      {
        CallVariable callVariable = (CallVariable)theEObject;
        T result = caseCallVariable(callVariable);
        if (result == null) result = caseGenericVariable(callVariable);
        if (result == null) result = caseParmsPrint(callVariable);
        if (result == null) result = casePrimary(callVariable);
        if (result == null) result = caseExpressions(callVariable);
        if (result == null) result = caseExpression(callVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ONLY_VAR:
      {
        OnlyVar onlyVar = (OnlyVar)theEObject;
        T result = caseOnlyVar(onlyVar);
        if (result == null) result = caseGenericVariable(onlyVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseGenericVariable(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.LOGICAL_PARAMS:
      {
        LogicalParams logicalParams = (LogicalParams)theEObject;
        T result = caseLogicalParams(logicalParams);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.LOGICAL_OPERATION:
      {
        LogicalOperation logicalOperation = (LogicalOperation)theEObject;
        T result = caseLogicalOperation(logicalOperation);
        if (result == null) result = caseLogicalParams(logicalOperation);
        if (result == null) result = caseOperation(logicalOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.LESS_THAN:
      {
        LessThan lessThan = (LessThan)theEObject;
        T result = caseLessThan(lessThan);
        if (result == null) result = caseLogicalOperation(lessThan);
        if (result == null) result = caseLogicalParams(lessThan);
        if (result == null) result = caseOperation(lessThan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.GREATER_THAN:
      {
        GreaterThan greaterThan = (GreaterThan)theEObject;
        T result = caseGreaterThan(greaterThan);
        if (result == null) result = caseLogicalOperation(greaterThan);
        if (result == null) result = caseLogicalParams(greaterThan);
        if (result == null) result = caseOperation(greaterThan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.EQUAL:
      {
        Equal equal = (Equal)theEObject;
        T result = caseEqual(equal);
        if (result == null) result = caseLogicalOperation(equal);
        if (result == null) result = caseLogicalParams(equal);
        if (result == null) result = caseOperation(equal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.NOT_EQUAL:
      {
        NotEqual notEqual = (NotEqual)theEObject;
        T result = caseNotEqual(notEqual);
        if (result == null) result = caseLogicalOperation(notEqual);
        if (result == null) result = caseLogicalParams(notEqual);
        if (result == null) result = caseOperation(notEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.LESS_OR_EQUAL:
      {
        LessOrEqual lessOrEqual = (LessOrEqual)theEObject;
        T result = caseLessOrEqual(lessOrEqual);
        if (result == null) result = caseLogicalOperation(lessOrEqual);
        if (result == null) result = caseLogicalParams(lessOrEqual);
        if (result == null) result = caseOperation(lessOrEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.GREATER_OR_EQUAL:
      {
        GreaterOrEqual greaterOrEqual = (GreaterOrEqual)theEObject;
        T result = caseGreaterOrEqual(greaterOrEqual);
        if (result == null) result = caseLogicalOperation(greaterOrEqual);
        if (result == null) result = caseLogicalParams(greaterOrEqual);
        if (result == null) result = caseOperation(greaterOrEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.BOOLEAN_FUNCTION:
      {
        BooleanFunction booleanFunction = (BooleanFunction)theEObject;
        T result = caseBooleanFunction(booleanFunction);
        if (result == null) result = caseOperation(booleanFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ANDS:
      {
        Ands ands = (Ands)theEObject;
        T result = caseAnds(ands);
        if (result == null) result = caseBooleanFunction(ands);
        if (result == null) result = caseOperation(ands);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ORS:
      {
        Ors ors = (Ors)theEObject;
        T result = caseOrs(ors);
        if (result == null) result = caseBooleanFunction(ors);
        if (result == null) result = caseOperation(ors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.NOTS:
      {
        Nots nots = (Nots)theEObject;
        T result = caseNots(nots);
        if (result == null) result = caseBooleanFunction(nots);
        if (result == null) result = caseOperation(nots);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.NORS:
      {
        Nors nors = (Nors)theEObject;
        T result = caseNors(nors);
        if (result == null) result = caseBooleanFunction(nors);
        if (result == null) result = caseOperation(nors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.NANDS:
      {
        Nands nands = (Nands)theEObject;
        T result = caseNands(nands);
        if (result == null) result = caseBooleanFunction(nands);
        if (result == null) result = caseOperation(nands);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.ARITMETIC_OPERATION:
      {
        AritmeticOperation aritmeticOperation = (AritmeticOperation)theEObject;
        T result = caseAritmeticOperation(aritmeticOperation);
        if (result == null) result = caseOperation(aritmeticOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.EXPRESSIONS:
      {
        Expressions expressions = (Expressions)theEObject;
        T result = caseExpressions(expressions);
        if (result == null) result = caseExpression(expressions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.PRIMARY:
      {
        Primary primary = (Primary)theEObject;
        T result = casePrimary(primary);
        if (result == null) result = caseExpressions(primary);
        if (result == null) result = caseExpression(primary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.DATAS:
      {
        Datas datas = (Datas)theEObject;
        T result = caseDatas(datas);
        if (result == null) result = caseParmsPrint(datas);
        if (result == null) result = casePrimary(datas);
        if (result == null) result = caseExpressions(datas);
        if (result == null) result = caseExpression(datas);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.NUMBERS:
      {
        Numbers numbers = (Numbers)theEObject;
        T result = caseNumbers(numbers);
        if (result == null) result = caseDatas(numbers);
        if (result == null) result = caseParmsPrint(numbers);
        if (result == null) result = casePrimary(numbers);
        if (result == null) result = caseExpressions(numbers);
        if (result == null) result = caseExpression(numbers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.STRINGS:
      {
        Strings strings = (Strings)theEObject;
        T result = caseStrings(strings);
        if (result == null) result = caseDatas(strings);
        if (result == null) result = caseParmsPrint(strings);
        if (result == null) result = casePrimary(strings);
        if (result == null) result = caseExpressions(strings);
        if (result == null) result = caseExpression(strings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.BOOLEANS:
      {
        Booleans booleans = (Booleans)theEObject;
        T result = caseBooleans(booleans);
        if (result == null) result = caseDatas(booleans);
        if (result == null) result = caseParmsPrint(booleans);
        if (result == null) result = casePrimary(booleans);
        if (result == null) result = caseExpressions(booleans);
        if (result == null) result = caseExpression(booleans);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.DOUBLES:
      {
        Doubles doubles = (Doubles)theEObject;
        T result = caseDoubles(doubles);
        if (result == null) result = caseDatas(doubles);
        if (result == null) result = caseParmsPrint(doubles);
        if (result == null) result = casePrimary(doubles);
        if (result == null) result = caseExpressions(doubles);
        if (result == null) result = caseExpression(doubles);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.PRINTS:
      {
        Prints prints = (Prints)theEObject;
        T result = casePrints(prints);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.FUN_OUTPUTS:
      {
        funOutputs funOutputs = (funOutputs)theEObject;
        T result = casefunOutputs(funOutputs);
        if (result == null) result = caseParametersfunc(funOutputs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.SUM:
      {
        Sum sum = (Sum)theEObject;
        T result = caseSum(sum);
        if (result == null) result = caseExpression(sum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.SUBS:
      {
        Subs subs = (Subs)theEObject;
        T result = caseSubs(subs);
        if (result == null) result = caseExpression(subs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.DIVITION:
      {
        Divition divition = (Divition)theEObject;
        T result = caseDivition(divition);
        if (result == null) result = caseExpression(divition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LlmsPackage.MULTIPLICATION:
      {
        Multiplication multiplication = (Multiplication)theEObject;
        T result = caseMultiplication(multiplication);
        if (result == null) result = caseExpressions(multiplication);
        if (result == null) result = caseExpression(multiplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperations(Operations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctions(Functions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameters Outptut</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameters Outptut</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParametersOutptut(ParametersOutptut object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parametersfunc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parametersfunc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParametersfunc(Parametersfunc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bodies</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bodies</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBodies(Bodies object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Parm Args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Parm Args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarParmArgs(varParmArgs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generic Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generic Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenericVariable(GenericVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loops</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loops</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoops(Loops object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFors(Fors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Whiles</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Whiles</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhiles(Whiles object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditionals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditionals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionals(Conditionals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ifs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ifs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfs(Ifs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Else Ifs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Else Ifs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseIfs(ElseIfs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elses</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elses</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElses(Elses object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parms Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parms Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParmsPrint(ParmsPrint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallFunction(CallFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallVariable(CallVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Only Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Only Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnlyVar(OnlyVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Params</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Params</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalParams(LogicalParams object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalOperation(LogicalOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Less Than</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Less Than</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLessThan(LessThan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Greater Than</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Greater Than</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGreaterThan(GreaterThan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqual(Equal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotEqual(NotEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Less Or Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Less Or Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLessOrEqual(LessOrEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Greater Or Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Greater Or Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGreaterOrEqual(GreaterOrEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanFunction(BooleanFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ands</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ands</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnds(Ands object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrs(Ors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nots</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nots</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNots(Nots object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNors(Nors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nands</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nands</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNands(Nands object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aritmetic Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aritmetic Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAritmeticOperation(AritmeticOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expressions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expressions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressions(Expressions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimary(Primary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Datas</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Datas</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatas(Datas object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numbers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numbers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumbers(Numbers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Strings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Strings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStrings(Strings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Booleans</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Booleans</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleans(Booleans object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Doubles</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Doubles</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubles(Doubles object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prints</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prints</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrints(Prints object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fun Outputs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fun Outputs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunOutputs(funOutputs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSum(Sum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubs(Subs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Divition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Divition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivition(Divition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplication(Multiplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //LlmsSwitch
