/**
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.llms.util;

import large.logic.forMathematics.statistics.llms.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see large.logic.forMathematics.statistics.llms.LlmsPackage
 * @generated
 */
public class LlmsAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LlmsPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LlmsAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LlmsPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LlmsSwitch<Adapter> modelSwitch =
    new LlmsSwitch<Adapter>()
    {
      @Override
      public Adapter caseOperations(Operations object)
      {
        return createOperationsAdapter();
      }
      @Override
      public Adapter casePrints(Prints object)
      {
        return createPrintsAdapter();
      }
      @Override
      public Adapter caseParmsPrint(ParmsPrint object)
      {
        return createParmsPrintAdapter();
      }
      @Override
      public Adapter caseNames(Names object)
      {
        return createNamesAdapter();
      }
      @Override
      public Adapter caseFunctions(Functions object)
      {
        return createFunctionsAdapter();
      }
      @Override
      public Adapter caseBodies(Bodies object)
      {
        return createBodiesAdapter();
      }
      @Override
      public Adapter caseLoops(Loops object)
      {
        return createLoopsAdapter();
      }
      @Override
      public Adapter caseConditionals(Conditionals object)
      {
        return createConditionalsAdapter();
      }
      @Override
      public Adapter caseLogicalParams(LogicalParams object)
      {
        return createLogicalParamsAdapter();
      }
      @Override
      public Adapter caseParametersOutptut(ParametersOutptut object)
      {
        return createParametersOutptutAdapter();
      }
      @Override
      public Adapter caseParametersfunc(Parametersfunc object)
      {
        return createParametersfuncAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseLogicalOperation(LogicalOperation object)
      {
        return createLogicalOperationAdapter();
      }
      @Override
      public Adapter caseLessThan(LessThan object)
      {
        return createLessThanAdapter();
      }
      @Override
      public Adapter caseGreaterThan(GreaterThan object)
      {
        return createGreaterThanAdapter();
      }
      @Override
      public Adapter caseEqual(Equal object)
      {
        return createEqualAdapter();
      }
      @Override
      public Adapter caseNotEqual(NotEqual object)
      {
        return createNotEqualAdapter();
      }
      @Override
      public Adapter caseLessOrEqual(LessOrEqual object)
      {
        return createLessOrEqualAdapter();
      }
      @Override
      public Adapter caseGreaterOrEqual(GreaterOrEqual object)
      {
        return createGreaterOrEqualAdapter();
      }
      @Override
      public Adapter caseBooleanFunction(BooleanFunction object)
      {
        return createBooleanFunctionAdapter();
      }
      @Override
      public Adapter caseAnds(Ands object)
      {
        return createAndsAdapter();
      }
      @Override
      public Adapter caseOrs(Ors object)
      {
        return createOrsAdapter();
      }
      @Override
      public Adapter caseNots(Nots object)
      {
        return createNotsAdapter();
      }
      @Override
      public Adapter caseNors(Nors object)
      {
        return createNorsAdapter();
      }
      @Override
      public Adapter caseNands(Nands object)
      {
        return createNandsAdapter();
      }
      @Override
      public Adapter caseAritmeticOperation(AritmeticOperation object)
      {
        return createAritmeticOperationAdapter();
      }
      @Override
      public Adapter caseExpressions(Expressions object)
      {
        return createExpressionsAdapter();
      }
      @Override
      public Adapter casePrimary(Primary object)
      {
        return createPrimaryAdapter();
      }
      @Override
      public Adapter casecallFunction(callFunction object)
      {
        return createcallFunctionAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseGenericVariable(GenericVariable object)
      {
        return createGenericVariableAdapter();
      }
      @Override
      public Adapter caseCallVariable(CallVariable object)
      {
        return createCallVariableAdapter();
      }
      @Override
      public Adapter casevarParmArgs(varParmArgs object)
      {
        return createvarParmArgsAdapter();
      }
      @Override
      public Adapter caseData(Data object)
      {
        return createDataAdapter();
      }
      @Override
      public Adapter caseNumbers(Numbers object)
      {
        return createNumbersAdapter();
      }
      @Override
      public Adapter caseStrings(Strings object)
      {
        return createStringsAdapter();
      }
      @Override
      public Adapter caseBooleans(Booleans object)
      {
        return createBooleansAdapter();
      }
      @Override
      public Adapter caseDoubles(Doubles object)
      {
        return createDoublesAdapter();
      }
      @Override
      public Adapter casefunOutputs(funOutputs object)
      {
        return createfunOutputsAdapter();
      }
      @Override
      public Adapter caseSum(Sum object)
      {
        return createSumAdapter();
      }
      @Override
      public Adapter caseSubs(Subs object)
      {
        return createSubsAdapter();
      }
      @Override
      public Adapter caseDivition(Divition object)
      {
        return createDivitionAdapter();
      }
      @Override
      public Adapter caseMultiplication(Multiplication object)
      {
        return createMultiplicationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Operations <em>Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Operations
   * @generated
   */
  public Adapter createOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Prints <em>Prints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Prints
   * @generated
   */
  public Adapter createPrintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.ParmsPrint <em>Parms Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.ParmsPrint
   * @generated
   */
  public Adapter createParmsPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Names <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Names
   * @generated
   */
  public Adapter createNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Functions <em>Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Functions
   * @generated
   */
  public Adapter createFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Bodies <em>Bodies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Bodies
   * @generated
   */
  public Adapter createBodiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Loops <em>Loops</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Loops
   * @generated
   */
  public Adapter createLoopsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Conditionals <em>Conditionals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Conditionals
   * @generated
   */
  public Adapter createConditionalsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.LogicalParams <em>Logical Params</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.LogicalParams
   * @generated
   */
  public Adapter createLogicalParamsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.ParametersOutptut <em>Parameters Outptut</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.ParametersOutptut
   * @generated
   */
  public Adapter createParametersOutptutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Parametersfunc <em>Parametersfunc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Parametersfunc
   * @generated
   */
  public Adapter createParametersfuncAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.LogicalOperation <em>Logical Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.LogicalOperation
   * @generated
   */
  public Adapter createLogicalOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.LessThan <em>Less Than</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.LessThan
   * @generated
   */
  public Adapter createLessThanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.GreaterThan <em>Greater Than</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.GreaterThan
   * @generated
   */
  public Adapter createGreaterThanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Equal <em>Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Equal
   * @generated
   */
  public Adapter createEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.NotEqual <em>Not Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.NotEqual
   * @generated
   */
  public Adapter createNotEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.LessOrEqual <em>Less Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.LessOrEqual
   * @generated
   */
  public Adapter createLessOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.GreaterOrEqual <em>Greater Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.GreaterOrEqual
   * @generated
   */
  public Adapter createGreaterOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.BooleanFunction <em>Boolean Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.BooleanFunction
   * @generated
   */
  public Adapter createBooleanFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Ands <em>Ands</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Ands
   * @generated
   */
  public Adapter createAndsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Ors <em>Ors</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Ors
   * @generated
   */
  public Adapter createOrsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Nots <em>Nots</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Nots
   * @generated
   */
  public Adapter createNotsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Nors <em>Nors</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Nors
   * @generated
   */
  public Adapter createNorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Nands <em>Nands</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Nands
   * @generated
   */
  public Adapter createNandsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.AritmeticOperation <em>Aritmetic Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.AritmeticOperation
   * @generated
   */
  public Adapter createAritmeticOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Expressions <em>Expressions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Expressions
   * @generated
   */
  public Adapter createExpressionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Primary <em>Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Primary
   * @generated
   */
  public Adapter createPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.callFunction <em>call Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.callFunction
   * @generated
   */
  public Adapter createcallFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.GenericVariable <em>Generic Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.GenericVariable
   * @generated
   */
  public Adapter createGenericVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.CallVariable <em>Call Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.CallVariable
   * @generated
   */
  public Adapter createCallVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.varParmArgs <em>var Parm Args</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.varParmArgs
   * @generated
   */
  public Adapter createvarParmArgsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Data <em>Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Data
   * @generated
   */
  public Adapter createDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Numbers <em>Numbers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Numbers
   * @generated
   */
  public Adapter createNumbersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Strings <em>Strings</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Strings
   * @generated
   */
  public Adapter createStringsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Booleans <em>Booleans</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Booleans
   * @generated
   */
  public Adapter createBooleansAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Doubles <em>Doubles</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Doubles
   * @generated
   */
  public Adapter createDoublesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.funOutputs <em>fun Outputs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.funOutputs
   * @generated
   */
  public Adapter createfunOutputsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Sum <em>Sum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Sum
   * @generated
   */
  public Adapter createSumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Subs <em>Subs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Subs
   * @generated
   */
  public Adapter createSubsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Divition <em>Divition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Divition
   * @generated
   */
  public Adapter createDivitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link large.logic.forMathematics.statistics.llms.Multiplication <em>Multiplication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see large.logic.forMathematics.statistics.llms.Multiplication
   * @generated
   */
  public Adapter createMultiplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LlmsAdapterFactory
