/**
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.llms.impl;

import large.logic.forMathematics.statistics.llms.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LlmsFactoryImpl extends EFactoryImpl implements LlmsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LlmsFactory init()
  {
    try
    {
      LlmsFactory theLlmsFactory = (LlmsFactory)EPackage.Registry.INSTANCE.getEFactory(LlmsPackage.eNS_URI);
      if (theLlmsFactory != null)
      {
        return theLlmsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LlmsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LlmsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LlmsPackage.OPERATIONS: return createOperations();
      case LlmsPackage.PRINTS: return createPrints();
      case LlmsPackage.PARMS_PRINT: return createParmsPrint();
      case LlmsPackage.NAMES: return createNames();
      case LlmsPackage.FUNCTIONS: return createFunctions();
      case LlmsPackage.BODIES: return createBodies();
      case LlmsPackage.LOOPS: return createLoops();
      case LlmsPackage.CONDITIONALS: return createConditionals();
      case LlmsPackage.LOGICAL_PARAMS: return createLogicalParams();
      case LlmsPackage.PARAMETERS_OUTPTUT: return createParametersOutptut();
      case LlmsPackage.PARAMETERSFUNC: return createParametersfunc();
      case LlmsPackage.EXPRESSION: return createExpression();
      case LlmsPackage.OPERATION: return createOperation();
      case LlmsPackage.LOGICAL_OPERATION: return createLogicalOperation();
      case LlmsPackage.LESS_THAN: return createLessThan();
      case LlmsPackage.GREATER_THAN: return createGreaterThan();
      case LlmsPackage.EQUAL: return createEqual();
      case LlmsPackage.NOT_EQUAL: return createNotEqual();
      case LlmsPackage.LESS_OR_EQUAL: return createLessOrEqual();
      case LlmsPackage.GREATER_OR_EQUAL: return createGreaterOrEqual();
      case LlmsPackage.BOOLEAN_FUNCTION: return createBooleanFunction();
      case LlmsPackage.ANDS: return createAnds();
      case LlmsPackage.ORS: return createOrs();
      case LlmsPackage.NOTS: return createNots();
      case LlmsPackage.NORS: return createNors();
      case LlmsPackage.NANDS: return createNands();
      case LlmsPackage.ARITMETIC_OPERATION: return createAritmeticOperation();
      case LlmsPackage.EXPRESSIONS: return createExpressions();
      case LlmsPackage.PRIMARY: return createPrimary();
      case LlmsPackage.CALL_FUNCTION: return createcallFunction();
      case LlmsPackage.ASSIGNMENT: return createAssignment();
      case LlmsPackage.GENERIC_VARIABLE: return createGenericVariable();
      case LlmsPackage.CALL_VARIABLE: return createCallVariable();
      case LlmsPackage.VAR_PARM_ARGS: return createvarParmArgs();
      case LlmsPackage.DATA: return createData();
      case LlmsPackage.NUMBERS: return createNumbers();
      case LlmsPackage.STRINGS: return createStrings();
      case LlmsPackage.BOOLEANS: return createBooleans();
      case LlmsPackage.DOUBLES: return createDoubles();
      case LlmsPackage.FUN_OUTPUTS: return createfunOutputs();
      case LlmsPackage.SUM: return createSum();
      case LlmsPackage.SUBS: return createSubs();
      case LlmsPackage.DIVITION: return createDivition();
      case LlmsPackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operations createOperations()
  {
    OperationsImpl operations = new OperationsImpl();
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Prints createPrints()
  {
    PrintsImpl prints = new PrintsImpl();
    return prints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParmsPrint createParmsPrint()
  {
    ParmsPrintImpl parmsPrint = new ParmsPrintImpl();
    return parmsPrint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Names createNames()
  {
    NamesImpl names = new NamesImpl();
    return names;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Functions createFunctions()
  {
    FunctionsImpl functions = new FunctionsImpl();
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bodies createBodies()
  {
    BodiesImpl bodies = new BodiesImpl();
    return bodies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loops createLoops()
  {
    LoopsImpl loops = new LoopsImpl();
    return loops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conditionals createConditionals()
  {
    ConditionalsImpl conditionals = new ConditionalsImpl();
    return conditionals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalParams createLogicalParams()
  {
    LogicalParamsImpl logicalParams = new LogicalParamsImpl();
    return logicalParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParametersOutptut createParametersOutptut()
  {
    ParametersOutptutImpl parametersOutptut = new ParametersOutptutImpl();
    return parametersOutptut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parametersfunc createParametersfunc()
  {
    ParametersfuncImpl parametersfunc = new ParametersfuncImpl();
    return parametersfunc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperation createLogicalOperation()
  {
    LogicalOperationImpl logicalOperation = new LogicalOperationImpl();
    return logicalOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThan createLessThan()
  {
    LessThanImpl lessThan = new LessThanImpl();
    return lessThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThan createGreaterThan()
  {
    GreaterThanImpl greaterThan = new GreaterThanImpl();
    return greaterThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equal createEqual()
  {
    EqualImpl equal = new EqualImpl();
    return equal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotEqual createNotEqual()
  {
    NotEqualImpl notEqual = new NotEqualImpl();
    return notEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessOrEqual createLessOrEqual()
  {
    LessOrEqualImpl lessOrEqual = new LessOrEqualImpl();
    return lessOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterOrEqual createGreaterOrEqual()
  {
    GreaterOrEqualImpl greaterOrEqual = new GreaterOrEqualImpl();
    return greaterOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanFunction createBooleanFunction()
  {
    BooleanFunctionImpl booleanFunction = new BooleanFunctionImpl();
    return booleanFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ands createAnds()
  {
    AndsImpl ands = new AndsImpl();
    return ands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ors createOrs()
  {
    OrsImpl ors = new OrsImpl();
    return ors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nots createNots()
  {
    NotsImpl nots = new NotsImpl();
    return nots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nors createNors()
  {
    NorsImpl nors = new NorsImpl();
    return nors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nands createNands()
  {
    NandsImpl nands = new NandsImpl();
    return nands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AritmeticOperation createAritmeticOperation()
  {
    AritmeticOperationImpl aritmeticOperation = new AritmeticOperationImpl();
    return aritmeticOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expressions createExpressions()
  {
    ExpressionsImpl expressions = new ExpressionsImpl();
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primary createPrimary()
  {
    PrimaryImpl primary = new PrimaryImpl();
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public callFunction createcallFunction()
  {
    callFunctionImpl callFunction = new callFunctionImpl();
    return callFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenericVariable createGenericVariable()
  {
    GenericVariableImpl genericVariable = new GenericVariableImpl();
    return genericVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallVariable createCallVariable()
  {
    CallVariableImpl callVariable = new CallVariableImpl();
    return callVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varParmArgs createvarParmArgs()
  {
    varParmArgsImpl varParmArgs = new varParmArgsImpl();
    return varParmArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Data createData()
  {
    DataImpl data = new DataImpl();
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Numbers createNumbers()
  {
    NumbersImpl numbers = new NumbersImpl();
    return numbers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Strings createStrings()
  {
    StringsImpl strings = new StringsImpl();
    return strings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Booleans createBooleans()
  {
    BooleansImpl booleans = new BooleansImpl();
    return booleans;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Doubles createDoubles()
  {
    DoublesImpl doubles = new DoublesImpl();
    return doubles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public funOutputs createfunOutputs()
  {
    funOutputsImpl funOutputs = new funOutputsImpl();
    return funOutputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sum createSum()
  {
    SumImpl sum = new SumImpl();
    return sum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subs createSubs()
  {
    SubsImpl subs = new SubsImpl();
    return subs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Divition createDivition()
  {
    DivitionImpl divition = new DivitionImpl();
    return divition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LlmsPackage getLlmsPackage()
  {
    return (LlmsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LlmsPackage getPackage()
  {
    return LlmsPackage.eINSTANCE;
  }

} //LlmsFactoryImpl
