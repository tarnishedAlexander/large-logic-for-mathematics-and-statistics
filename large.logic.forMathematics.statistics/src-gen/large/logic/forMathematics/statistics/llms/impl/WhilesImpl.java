/**
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.llms.impl;

import java.util.Collection;

import large.logic.forMathematics.statistics.llms.Bodies;
import large.logic.forMathematics.statistics.llms.LlmsPackage;
import large.logic.forMathematics.statistics.llms.LogicalParams;
import large.logic.forMathematics.statistics.llms.Whiles;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Whiles</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.WhilesImpl#getLogical <em>Logical</em>}</li>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.WhilesImpl#getBodie <em>Bodie</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WhilesImpl extends LoopsImpl implements Whiles
{
  /**
   * The cached value of the '{@link #getLogical() <em>Logical</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogical()
   * @generated
   * @ordered
   */
  protected LogicalParams logical;

  /**
   * The cached value of the '{@link #getBodie() <em>Bodie</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodie()
   * @generated
   * @ordered
   */
  protected EList<Bodies> bodie;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhilesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LlmsPackage.Literals.WHILES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalParams getLogical()
  {
    return logical;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogical(LogicalParams newLogical, NotificationChain msgs)
  {
    LogicalParams oldLogical = logical;
    logical = newLogical;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LlmsPackage.WHILES__LOGICAL, oldLogical, newLogical);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLogical(LogicalParams newLogical)
  {
    if (newLogical != logical)
    {
      NotificationChain msgs = null;
      if (logical != null)
        msgs = ((InternalEObject)logical).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LlmsPackage.WHILES__LOGICAL, null, msgs);
      if (newLogical != null)
        msgs = ((InternalEObject)newLogical).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LlmsPackage.WHILES__LOGICAL, null, msgs);
      msgs = basicSetLogical(newLogical, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LlmsPackage.WHILES__LOGICAL, newLogical, newLogical));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Bodies> getBodie()
  {
    if (bodie == null)
    {
      bodie = new EObjectContainmentEList<Bodies>(Bodies.class, this, LlmsPackage.WHILES__BODIE);
    }
    return bodie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LlmsPackage.WHILES__LOGICAL:
        return basicSetLogical(null, msgs);
      case LlmsPackage.WHILES__BODIE:
        return ((InternalEList<?>)getBodie()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LlmsPackage.WHILES__LOGICAL:
        return getLogical();
      case LlmsPackage.WHILES__BODIE:
        return getBodie();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LlmsPackage.WHILES__LOGICAL:
        setLogical((LogicalParams)newValue);
        return;
      case LlmsPackage.WHILES__BODIE:
        getBodie().clear();
        getBodie().addAll((Collection<? extends Bodies>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LlmsPackage.WHILES__LOGICAL:
        setLogical((LogicalParams)null);
        return;
      case LlmsPackage.WHILES__BODIE:
        getBodie().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LlmsPackage.WHILES__LOGICAL:
        return logical != null;
      case LlmsPackage.WHILES__BODIE:
        return bodie != null && !bodie.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //WhilesImpl
