/**
 * generated by Xtext 2.35.0
 */
package large.logic.forMathematics.statistics.llms.impl;

import java.util.Collection;

import large.logic.forMathematics.statistics.llms.Conditionals;
import large.logic.forMathematics.statistics.llms.Functions;
import large.logic.forMathematics.statistics.llms.LlmsPackage;
import large.logic.forMathematics.statistics.llms.Loops;
import large.logic.forMathematics.statistics.llms.Operations;
import large.logic.forMathematics.statistics.llms.Prints;
import large.logic.forMathematics.statistics.llms.Variables;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.OperationsImpl#getFunc <em>Func</em>}</li>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.OperationsImpl#getVar <em>Var</em>}</li>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.OperationsImpl#getConditional <em>Conditional</em>}</li>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.OperationsImpl#getLoops <em>Loops</em>}</li>
 *   <li>{@link large.logic.forMathematics.statistics.llms.impl.OperationsImpl#getPrint <em>Print</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationsImpl extends MinimalEObjectImpl.Container implements Operations
{
  /**
   * The cached value of the '{@link #getFunc() <em>Func</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunc()
   * @generated
   * @ordered
   */
  protected EList<Functions> func;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected EList<Variables> var;

  /**
   * The cached value of the '{@link #getConditional() <em>Conditional</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditional()
   * @generated
   * @ordered
   */
  protected EList<Conditionals> conditional;

  /**
   * The cached value of the '{@link #getLoops() <em>Loops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoops()
   * @generated
   * @ordered
   */
  protected EList<Loops> loops;

  /**
   * The cached value of the '{@link #getPrint() <em>Print</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrint()
   * @generated
   * @ordered
   */
  protected EList<Prints> print;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LlmsPackage.Literals.OPERATIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Functions> getFunc()
  {
    if (func == null)
    {
      func = new EObjectContainmentEList<Functions>(Functions.class, this, LlmsPackage.OPERATIONS__FUNC);
    }
    return func;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Variables> getVar()
  {
    if (var == null)
    {
      var = new EObjectContainmentEList<Variables>(Variables.class, this, LlmsPackage.OPERATIONS__VAR);
    }
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Conditionals> getConditional()
  {
    if (conditional == null)
    {
      conditional = new EObjectContainmentEList<Conditionals>(Conditionals.class, this, LlmsPackage.OPERATIONS__CONDITIONAL);
    }
    return conditional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Loops> getLoops()
  {
    if (loops == null)
    {
      loops = new EObjectContainmentEList<Loops>(Loops.class, this, LlmsPackage.OPERATIONS__LOOPS);
    }
    return loops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Prints> getPrint()
  {
    if (print == null)
    {
      print = new EObjectContainmentEList<Prints>(Prints.class, this, LlmsPackage.OPERATIONS__PRINT);
    }
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LlmsPackage.OPERATIONS__FUNC:
        return ((InternalEList<?>)getFunc()).basicRemove(otherEnd, msgs);
      case LlmsPackage.OPERATIONS__VAR:
        return ((InternalEList<?>)getVar()).basicRemove(otherEnd, msgs);
      case LlmsPackage.OPERATIONS__CONDITIONAL:
        return ((InternalEList<?>)getConditional()).basicRemove(otherEnd, msgs);
      case LlmsPackage.OPERATIONS__LOOPS:
        return ((InternalEList<?>)getLoops()).basicRemove(otherEnd, msgs);
      case LlmsPackage.OPERATIONS__PRINT:
        return ((InternalEList<?>)getPrint()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LlmsPackage.OPERATIONS__FUNC:
        return getFunc();
      case LlmsPackage.OPERATIONS__VAR:
        return getVar();
      case LlmsPackage.OPERATIONS__CONDITIONAL:
        return getConditional();
      case LlmsPackage.OPERATIONS__LOOPS:
        return getLoops();
      case LlmsPackage.OPERATIONS__PRINT:
        return getPrint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LlmsPackage.OPERATIONS__FUNC:
        getFunc().clear();
        getFunc().addAll((Collection<? extends Functions>)newValue);
        return;
      case LlmsPackage.OPERATIONS__VAR:
        getVar().clear();
        getVar().addAll((Collection<? extends Variables>)newValue);
        return;
      case LlmsPackage.OPERATIONS__CONDITIONAL:
        getConditional().clear();
        getConditional().addAll((Collection<? extends Conditionals>)newValue);
        return;
      case LlmsPackage.OPERATIONS__LOOPS:
        getLoops().clear();
        getLoops().addAll((Collection<? extends Loops>)newValue);
        return;
      case LlmsPackage.OPERATIONS__PRINT:
        getPrint().clear();
        getPrint().addAll((Collection<? extends Prints>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LlmsPackage.OPERATIONS__FUNC:
        getFunc().clear();
        return;
      case LlmsPackage.OPERATIONS__VAR:
        getVar().clear();
        return;
      case LlmsPackage.OPERATIONS__CONDITIONAL:
        getConditional().clear();
        return;
      case LlmsPackage.OPERATIONS__LOOPS:
        getLoops().clear();
        return;
      case LlmsPackage.OPERATIONS__PRINT:
        getPrint().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LlmsPackage.OPERATIONS__FUNC:
        return func != null && !func.isEmpty();
      case LlmsPackage.OPERATIONS__VAR:
        return var != null && !var.isEmpty();
      case LlmsPackage.OPERATIONS__CONDITIONAL:
        return conditional != null && !conditional.isEmpty();
      case LlmsPackage.OPERATIONS__LOOPS:
        return loops != null && !loops.isEmpty();
      case LlmsPackage.OPERATIONS__PRINT:
        return print != null && !print.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //OperationsImpl
