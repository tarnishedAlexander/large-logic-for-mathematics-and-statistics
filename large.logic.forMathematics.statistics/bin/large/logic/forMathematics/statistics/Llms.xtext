grammar large.logic.forMathematics.statistics.Llms with org.eclipse.xtext.common.Terminals

generate llms "http://www.logic.large/forMathematics/statistics/Llms"

Operations:
	{Operations} "Class"
	name=ID
	"{"
	(func+=Functions |
	vars+=varParmArgs |
	conditional+=Conditionals |
	loops+=Loops |
	print+=Prints)*
	"}";

Functions:
	"Function"
	output=ParametersOutptut
	"<="
	name=ID
	params=Parametersfunc
	"=>"
	"{"
	body=Bodies
	"}";

ParametersOutptut:
	param=varParmArgs
	|
	"["
	{ParametersOutptut}
	(params+=varParmArgs ("," params+=varParmArgs)*)?
	"]";

Parametersfunc:
	"("
	{funOutputs}
	(params+=Expression ("," params+=Expression)*)?
	")";

Bodies:
	{Bodies}
	(var+=GenericVariable |
	loops+=Loops |
	cond+=Conditionals)+
	";";

varParmArgs: // with body
	name=ID ":" dataType=DataTypes ('<=' exp=Expression);//borrar el ; genera waringni

Expression:
	op=Operation;

GenericVariable:
	CallVariable | varParmArgs | Assignment | OnlyVar;

Loops:
	Fors | Whiles
	;
	
	
Fors:
	"for"
	"("
	var=GenericVariable ":" number=Numbers
	")"
	"=>"
	"{"
	body+=Bodies+
	"}"
;

Whiles:
	'while'
	'('
	logical=LogicalParams
	')'
	'{'
	bodie+=Bodies+
	'}';

Conditionals:
	
	ifs = Ifs elseif+=ElseIfs* elses=Elses
;
	
Ifs:
	"if" "("
	lg = LogicalParams
	")"
	"=>"
	"{"
	body+=Bodies+
	"}"
;

ElseIfs:
	"else-if"
	"("
	logicParms+=LogicalParams
	")"
	"=>"
	"{"
	body+=Bodies+
	"}"
;

Elses:
	"else{"
	body+=Bodies+
	"}";

DataTypes:
	"int" | "bool" | "doubles" | "string";


ParmsPrint:
	Datas | CallVariable | CallFunction;

CallFunction:
	func=[Functions]
	"(" (exp+=Expression ("," exp+=Expression)*)? ")";

CallVariable:
	vars=[varParmArgs];

OnlyVar:
	name=ID ':' dataType=DataTypes;

// re asignacion 
Assignment:
	vars=[varParmArgs] '<=' exp=Expression ";";

LogicalParams:
	LogicalOperation (boolFunc+=BooleanFunction lgicOp+=LogicalOperation)*;

Operation:
	AritmeticOperation | LogicalOperation | BooleanFunction;

LogicalOperation:
	LessThan | GreaterThan | Equal | NotEqual | LessOrEqual | GreaterOrEqual;

LessThan:
	"<" left=Primary right=Primary;

GreaterThan:
	">" left=Primary right=Primary;

Equal:
	"=" left=Primary right=Primary;

NotEqual:
	"!=" left=Primary right=Primary;

LessOrEqual:
	"<=" left=Primary right=Primary;

GreaterOrEqual:
	">=" left=Primary right=Primary;

BooleanFunction:
	Ands | Ors | Nots | Nors | Nands;

Ands:
	"&&" primary+=Primary+;

Ors:
	"||" primary+=Primary+;

Nots:
	"!" primary+=Primary+;

Nors:
	"nor" primary+=Primary+;

Nands:
	"nand" primary+=Primary+;

AritmeticOperation:
	sum=Sum;

Sum returns Expression:
	Subs ({Sum.left=current} '+' right=Subs)*;

Subs returns Expression:
	Divition ({Subs.left=current} '-' right=Divition)*;

Divition returns Expression:
	Multiplication ({Divition.left=current} '/' right=Multiplication)*;

Multiplication returns Expressions:
	Primary ({Multiplication.left=current} '*' right=Primary)*;

Primary:
	varParmArgs | CallVariable | CallFunction | Datas;

// ((data+=Data("," data+=Data)*)? | (vars+=[Variables](","vars+=[Variables])*)? )
//	Variables:
//		(varParmArgs | CallVariable) //reasignar un valor
//		"<="
//		exp = Expression
//		";"
//	;
Datas:
	Numbers | Strings | Booleans | Doubles;

Numbers:
	value=INT;

Strings:
	value=STRING;

Booleans:
	value?='true' | {Booleans} 'false';

Doubles:
	value=DOUBLE;

Prints:
	{Prints} "print" "("
	(print+=ParmsPrint ("," print+=ParmsPrint)*)?
	")";

terminal DOUBLE:
	'0'..'9'+ '.' ('0'..'9')*;
